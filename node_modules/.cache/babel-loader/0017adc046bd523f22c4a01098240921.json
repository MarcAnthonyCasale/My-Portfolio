{"ast":null,"code":"// ProgressBar.js 1.1.1\n// https://kimmobrunfeldt.github.io/progressbar.js\n// License: MIT\n\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n    g.ProgressBar = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n        return n[i].exports;\n      }\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n      return o;\n    }\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      (function (global) {\n        (function () {\n          /**\n           * Lodash (Custom Build) <https://lodash.com/>\n           * Build: `lodash modularize exports=\"npm\" -o ./`\n           * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n           * Released under MIT license <https://lodash.com/license>\n           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n           */\n\n          /** Used as the size to enable large array optimizations. */\n          var LARGE_ARRAY_SIZE = 200;\n\n          /** Used to stand-in for `undefined` hash values. */\n          var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n          /** Used to detect hot functions by number of calls within a span of milliseconds. */\n          var HOT_COUNT = 800,\n            HOT_SPAN = 16;\n\n          /** Used as references for various `Number` constants. */\n          var MAX_SAFE_INTEGER = 9007199254740991;\n\n          /** `Object#toString` result references. */\n          var argsTag = '[object Arguments]',\n            arrayTag = '[object Array]',\n            asyncTag = '[object AsyncFunction]',\n            boolTag = '[object Boolean]',\n            dateTag = '[object Date]',\n            errorTag = '[object Error]',\n            funcTag = '[object Function]',\n            genTag = '[object GeneratorFunction]',\n            mapTag = '[object Map]',\n            numberTag = '[object Number]',\n            nullTag = '[object Null]',\n            objectTag = '[object Object]',\n            proxyTag = '[object Proxy]',\n            regexpTag = '[object RegExp]',\n            setTag = '[object Set]',\n            stringTag = '[object String]',\n            undefinedTag = '[object Undefined]',\n            weakMapTag = '[object WeakMap]';\n          var arrayBufferTag = '[object ArrayBuffer]',\n            dataViewTag = '[object DataView]',\n            float32Tag = '[object Float32Array]',\n            float64Tag = '[object Float64Array]',\n            int8Tag = '[object Int8Array]',\n            int16Tag = '[object Int16Array]',\n            int32Tag = '[object Int32Array]',\n            uint8Tag = '[object Uint8Array]',\n            uint8ClampedTag = '[object Uint8ClampedArray]',\n            uint16Tag = '[object Uint16Array]',\n            uint32Tag = '[object Uint32Array]';\n\n          /**\n           * Used to match `RegExp`\n           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n           */\n          var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n          /** Used to detect host constructors (Safari). */\n          var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n          /** Used to detect unsigned integer values. */\n          var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n          /** Used to identify `toStringTag` values of typed arrays. */\n          var typedArrayTags = {};\n          typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n          typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n\n          /** Detect free variable `global` from Node.js. */\n          var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n          /** Detect free variable `self`. */\n          var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n          /** Used as a reference to the global object. */\n          var root = freeGlobal || freeSelf || Function('return this')();\n\n          /** Detect free variable `exports`. */\n          var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n          /** Detect free variable `module`. */\n          var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n          /** Detect the popular CommonJS extension `module.exports`. */\n          var moduleExports = freeModule && freeModule.exports === freeExports;\n\n          /** Detect free variable `process` from Node.js. */\n          var freeProcess = moduleExports && freeGlobal.process;\n\n          /** Used to access faster Node.js helpers. */\n          var nodeUtil = function () {\n            try {\n              // Use `util.types` for Node.js 10+.\n              var types = freeModule && freeModule.require && freeModule.require('util').types;\n              if (types) {\n                return types;\n              }\n\n              // Legacy `process.binding('util')` for Node.js < 10.\n              return freeProcess && freeProcess.binding && freeProcess.binding('util');\n            } catch (e) {}\n          }();\n\n          /* Node.js helper references. */\n          var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n          /**\n           * A faster alternative to `Function#apply`, this function invokes `func`\n           * with the `this` binding of `thisArg` and the arguments of `args`.\n           *\n           * @private\n           * @param {Function} func The function to invoke.\n           * @param {*} thisArg The `this` binding of `func`.\n           * @param {Array} args The arguments to invoke `func` with.\n           * @returns {*} Returns the result of `func`.\n           */\n          function apply(func, thisArg, args) {\n            switch (args.length) {\n              case 0:\n                return func.call(thisArg);\n              case 1:\n                return func.call(thisArg, args[0]);\n              case 2:\n                return func.call(thisArg, args[0], args[1]);\n              case 3:\n                return func.call(thisArg, args[0], args[1], args[2]);\n            }\n            return func.apply(thisArg, args);\n          }\n\n          /**\n           * The base implementation of `_.times` without support for iteratee shorthands\n           * or max array length checks.\n           *\n           * @private\n           * @param {number} n The number of times to invoke `iteratee`.\n           * @param {Function} iteratee The function invoked per iteration.\n           * @returns {Array} Returns the array of results.\n           */\n          function baseTimes(n, iteratee) {\n            var index = -1,\n              result = Array(n);\n            while (++index < n) {\n              result[index] = iteratee(index);\n            }\n            return result;\n          }\n\n          /**\n           * The base implementation of `_.unary` without support for storing metadata.\n           *\n           * @private\n           * @param {Function} func The function to cap arguments for.\n           * @returns {Function} Returns the new capped function.\n           */\n          function baseUnary(func) {\n            return function (value) {\n              return func(value);\n            };\n          }\n\n          /**\n           * Gets the value at `key` of `object`.\n           *\n           * @private\n           * @param {Object} [object] The object to query.\n           * @param {string} key The key of the property to get.\n           * @returns {*} Returns the property value.\n           */\n          function getValue(object, key) {\n            return object == null ? undefined : object[key];\n          }\n\n          /**\n           * Creates a unary function that invokes `func` with its argument transformed.\n           *\n           * @private\n           * @param {Function} func The function to wrap.\n           * @param {Function} transform The argument transform.\n           * @returns {Function} Returns the new function.\n           */\n          function overArg(func, transform) {\n            return function (arg) {\n              return func(transform(arg));\n            };\n          }\n\n          /** Used for built-in method references. */\n          var arrayProto = Array.prototype,\n            funcProto = Function.prototype,\n            objectProto = Object.prototype;\n\n          /** Used to detect overreaching core-js shims. */\n          var coreJsData = root['__core-js_shared__'];\n\n          /** Used to resolve the decompiled source of functions. */\n          var funcToString = funcProto.toString;\n\n          /** Used to check objects for own properties. */\n          var hasOwnProperty = objectProto.hasOwnProperty;\n\n          /** Used to detect methods masquerading as native. */\n          var maskSrcKey = function () {\n            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n            return uid ? 'Symbol(src)_1.' + uid : '';\n          }();\n\n          /**\n           * Used to resolve the\n           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n           * of values.\n           */\n          var nativeObjectToString = objectProto.toString;\n\n          /** Used to infer the `Object` constructor. */\n          var objectCtorString = funcToString.call(Object);\n\n          /** Used to detect if a method is native. */\n          var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n\n          /** Built-in value references. */\n          var Buffer = moduleExports ? root.Buffer : undefined,\n            Symbol = root.Symbol,\n            Uint8Array = root.Uint8Array,\n            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n            getPrototype = overArg(Object.getPrototypeOf, Object),\n            objectCreate = Object.create,\n            propertyIsEnumerable = objectProto.propertyIsEnumerable,\n            splice = arrayProto.splice,\n            symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n          var defineProperty = function () {\n            try {\n              var func = getNative(Object, 'defineProperty');\n              func({}, '', {});\n              return func;\n            } catch (e) {}\n          }();\n\n          /* Built-in method references for those with the same name as other `lodash` methods. */\n          var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n            nativeMax = Math.max,\n            nativeNow = Date.now;\n\n          /* Built-in method references that are verified to be native. */\n          var Map = getNative(root, 'Map'),\n            nativeCreate = getNative(Object, 'create');\n\n          /**\n           * The base implementation of `_.create` without support for assigning\n           * properties to the created object.\n           *\n           * @private\n           * @param {Object} proto The object to inherit from.\n           * @returns {Object} Returns the new object.\n           */\n          var baseCreate = function () {\n            function object() {}\n            return function (proto) {\n              if (!isObject(proto)) {\n                return {};\n              }\n              if (objectCreate) {\n                return objectCreate(proto);\n              }\n              object.prototype = proto;\n              var result = new object();\n              object.prototype = undefined;\n              return result;\n            };\n          }();\n\n          /**\n           * Creates a hash object.\n           *\n           * @private\n           * @constructor\n           * @param {Array} [entries] The key-value pairs to cache.\n           */\n          function Hash(entries) {\n            var index = -1,\n              length = entries == null ? 0 : entries.length;\n            this.clear();\n            while (++index < length) {\n              var entry = entries[index];\n              this.set(entry[0], entry[1]);\n            }\n          }\n\n          /**\n           * Removes all key-value entries from the hash.\n           *\n           * @private\n           * @name clear\n           * @memberOf Hash\n           */\n          function hashClear() {\n            this.__data__ = nativeCreate ? nativeCreate(null) : {};\n            this.size = 0;\n          }\n\n          /**\n           * Removes `key` and its value from the hash.\n           *\n           * @private\n           * @name delete\n           * @memberOf Hash\n           * @param {Object} hash The hash to modify.\n           * @param {string} key The key of the value to remove.\n           * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n           */\n          function hashDelete(key) {\n            var result = this.has(key) && delete this.__data__[key];\n            this.size -= result ? 1 : 0;\n            return result;\n          }\n\n          /**\n           * Gets the hash value for `key`.\n           *\n           * @private\n           * @name get\n           * @memberOf Hash\n           * @param {string} key The key of the value to get.\n           * @returns {*} Returns the entry value.\n           */\n          function hashGet(key) {\n            var data = this.__data__;\n            if (nativeCreate) {\n              var result = data[key];\n              return result === HASH_UNDEFINED ? undefined : result;\n            }\n            return hasOwnProperty.call(data, key) ? data[key] : undefined;\n          }\n\n          /**\n           * Checks if a hash value for `key` exists.\n           *\n           * @private\n           * @name has\n           * @memberOf Hash\n           * @param {string} key The key of the entry to check.\n           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n           */\n          function hashHas(key) {\n            var data = this.__data__;\n            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n          }\n\n          /**\n           * Sets the hash `key` to `value`.\n           *\n           * @private\n           * @name set\n           * @memberOf Hash\n           * @param {string} key The key of the value to set.\n           * @param {*} value The value to set.\n           * @returns {Object} Returns the hash instance.\n           */\n          function hashSet(key, value) {\n            var data = this.__data__;\n            this.size += this.has(key) ? 0 : 1;\n            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n            return this;\n          }\n\n          // Add methods to `Hash`.\n          Hash.prototype.clear = hashClear;\n          Hash.prototype['delete'] = hashDelete;\n          Hash.prototype.get = hashGet;\n          Hash.prototype.has = hashHas;\n          Hash.prototype.set = hashSet;\n\n          /**\n           * Creates an list cache object.\n           *\n           * @private\n           * @constructor\n           * @param {Array} [entries] The key-value pairs to cache.\n           */\n          function ListCache(entries) {\n            var index = -1,\n              length = entries == null ? 0 : entries.length;\n            this.clear();\n            while (++index < length) {\n              var entry = entries[index];\n              this.set(entry[0], entry[1]);\n            }\n          }\n\n          /**\n           * Removes all key-value entries from the list cache.\n           *\n           * @private\n           * @name clear\n           * @memberOf ListCache\n           */\n          function listCacheClear() {\n            this.__data__ = [];\n            this.size = 0;\n          }\n\n          /**\n           * Removes `key` and its value from the list cache.\n           *\n           * @private\n           * @name delete\n           * @memberOf ListCache\n           * @param {string} key The key of the value to remove.\n           * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n           */\n          function listCacheDelete(key) {\n            var data = this.__data__,\n              index = assocIndexOf(data, key);\n            if (index < 0) {\n              return false;\n            }\n            var lastIndex = data.length - 1;\n            if (index == lastIndex) {\n              data.pop();\n            } else {\n              splice.call(data, index, 1);\n            }\n            --this.size;\n            return true;\n          }\n\n          /**\n           * Gets the list cache value for `key`.\n           *\n           * @private\n           * @name get\n           * @memberOf ListCache\n           * @param {string} key The key of the value to get.\n           * @returns {*} Returns the entry value.\n           */\n          function listCacheGet(key) {\n            var data = this.__data__,\n              index = assocIndexOf(data, key);\n            return index < 0 ? undefined : data[index][1];\n          }\n\n          /**\n           * Checks if a list cache value for `key` exists.\n           *\n           * @private\n           * @name has\n           * @memberOf ListCache\n           * @param {string} key The key of the entry to check.\n           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n           */\n          function listCacheHas(key) {\n            return assocIndexOf(this.__data__, key) > -1;\n          }\n\n          /**\n           * Sets the list cache `key` to `value`.\n           *\n           * @private\n           * @name set\n           * @memberOf ListCache\n           * @param {string} key The key of the value to set.\n           * @param {*} value The value to set.\n           * @returns {Object} Returns the list cache instance.\n           */\n          function listCacheSet(key, value) {\n            var data = this.__data__,\n              index = assocIndexOf(data, key);\n            if (index < 0) {\n              ++this.size;\n              data.push([key, value]);\n            } else {\n              data[index][1] = value;\n            }\n            return this;\n          }\n\n          // Add methods to `ListCache`.\n          ListCache.prototype.clear = listCacheClear;\n          ListCache.prototype['delete'] = listCacheDelete;\n          ListCache.prototype.get = listCacheGet;\n          ListCache.prototype.has = listCacheHas;\n          ListCache.prototype.set = listCacheSet;\n\n          /**\n           * Creates a map cache object to store key-value pairs.\n           *\n           * @private\n           * @constructor\n           * @param {Array} [entries] The key-value pairs to cache.\n           */\n          function MapCache(entries) {\n            var index = -1,\n              length = entries == null ? 0 : entries.length;\n            this.clear();\n            while (++index < length) {\n              var entry = entries[index];\n              this.set(entry[0], entry[1]);\n            }\n          }\n\n          /**\n           * Removes all key-value entries from the map.\n           *\n           * @private\n           * @name clear\n           * @memberOf MapCache\n           */\n          function mapCacheClear() {\n            this.size = 0;\n            this.__data__ = {\n              'hash': new Hash(),\n              'map': new (Map || ListCache)(),\n              'string': new Hash()\n            };\n          }\n\n          /**\n           * Removes `key` and its value from the map.\n           *\n           * @private\n           * @name delete\n           * @memberOf MapCache\n           * @param {string} key The key of the value to remove.\n           * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n           */\n          function mapCacheDelete(key) {\n            var result = getMapData(this, key)['delete'](key);\n            this.size -= result ? 1 : 0;\n            return result;\n          }\n\n          /**\n           * Gets the map value for `key`.\n           *\n           * @private\n           * @name get\n           * @memberOf MapCache\n           * @param {string} key The key of the value to get.\n           * @returns {*} Returns the entry value.\n           */\n          function mapCacheGet(key) {\n            return getMapData(this, key).get(key);\n          }\n\n          /**\n           * Checks if a map value for `key` exists.\n           *\n           * @private\n           * @name has\n           * @memberOf MapCache\n           * @param {string} key The key of the entry to check.\n           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n           */\n          function mapCacheHas(key) {\n            return getMapData(this, key).has(key);\n          }\n\n          /**\n           * Sets the map `key` to `value`.\n           *\n           * @private\n           * @name set\n           * @memberOf MapCache\n           * @param {string} key The key of the value to set.\n           * @param {*} value The value to set.\n           * @returns {Object} Returns the map cache instance.\n           */\n          function mapCacheSet(key, value) {\n            var data = getMapData(this, key),\n              size = data.size;\n            data.set(key, value);\n            this.size += data.size == size ? 0 : 1;\n            return this;\n          }\n\n          // Add methods to `MapCache`.\n          MapCache.prototype.clear = mapCacheClear;\n          MapCache.prototype['delete'] = mapCacheDelete;\n          MapCache.prototype.get = mapCacheGet;\n          MapCache.prototype.has = mapCacheHas;\n          MapCache.prototype.set = mapCacheSet;\n\n          /**\n           * Creates a stack cache object to store key-value pairs.\n           *\n           * @private\n           * @constructor\n           * @param {Array} [entries] The key-value pairs to cache.\n           */\n          function Stack(entries) {\n            var data = this.__data__ = new ListCache(entries);\n            this.size = data.size;\n          }\n\n          /**\n           * Removes all key-value entries from the stack.\n           *\n           * @private\n           * @name clear\n           * @memberOf Stack\n           */\n          function stackClear() {\n            this.__data__ = new ListCache();\n            this.size = 0;\n          }\n\n          /**\n           * Removes `key` and its value from the stack.\n           *\n           * @private\n           * @name delete\n           * @memberOf Stack\n           * @param {string} key The key of the value to remove.\n           * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n           */\n          function stackDelete(key) {\n            var data = this.__data__,\n              result = data['delete'](key);\n            this.size = data.size;\n            return result;\n          }\n\n          /**\n           * Gets the stack value for `key`.\n           *\n           * @private\n           * @name get\n           * @memberOf Stack\n           * @param {string} key The key of the value to get.\n           * @returns {*} Returns the entry value.\n           */\n          function stackGet(key) {\n            return this.__data__.get(key);\n          }\n\n          /**\n           * Checks if a stack value for `key` exists.\n           *\n           * @private\n           * @name has\n           * @memberOf Stack\n           * @param {string} key The key of the entry to check.\n           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n           */\n          function stackHas(key) {\n            return this.__data__.has(key);\n          }\n\n          /**\n           * Sets the stack `key` to `value`.\n           *\n           * @private\n           * @name set\n           * @memberOf Stack\n           * @param {string} key The key of the value to set.\n           * @param {*} value The value to set.\n           * @returns {Object} Returns the stack cache instance.\n           */\n          function stackSet(key, value) {\n            var data = this.__data__;\n            if (data instanceof ListCache) {\n              var pairs = data.__data__;\n              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n                pairs.push([key, value]);\n                this.size = ++data.size;\n                return this;\n              }\n              data = this.__data__ = new MapCache(pairs);\n            }\n            data.set(key, value);\n            this.size = data.size;\n            return this;\n          }\n\n          // Add methods to `Stack`.\n          Stack.prototype.clear = stackClear;\n          Stack.prototype['delete'] = stackDelete;\n          Stack.prototype.get = stackGet;\n          Stack.prototype.has = stackHas;\n          Stack.prototype.set = stackSet;\n\n          /**\n           * Creates an array of the enumerable property names of the array-like `value`.\n           *\n           * @private\n           * @param {*} value The value to query.\n           * @param {boolean} inherited Specify returning inherited property names.\n           * @returns {Array} Returns the array of property names.\n           */\n          function arrayLikeKeys(value, inherited) {\n            var isArr = isArray(value),\n              isArg = !isArr && isArguments(value),\n              isBuff = !isArr && !isArg && isBuffer(value),\n              isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n              skipIndexes = isArr || isArg || isBuff || isType,\n              result = skipIndexes ? baseTimes(value.length, String) : [],\n              length = result.length;\n            for (var key in value) {\n              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (\n              // Safari 9 has enumerable `arguments.length` in strict mode.\n              key == 'length' ||\n              // Node.js 0.10 has enumerable non-index properties on buffers.\n              isBuff && (key == 'offset' || key == 'parent') ||\n              // PhantomJS 2 has enumerable non-index properties on typed arrays.\n              isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||\n              // Skip index properties.\n              isIndex(key, length)))) {\n                result.push(key);\n              }\n            }\n            return result;\n          }\n\n          /**\n           * This function is like `assignValue` except that it doesn't assign\n           * `undefined` values.\n           *\n           * @private\n           * @param {Object} object The object to modify.\n           * @param {string} key The key of the property to assign.\n           * @param {*} value The value to assign.\n           */\n          function assignMergeValue(object, key, value) {\n            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n              baseAssignValue(object, key, value);\n            }\n          }\n\n          /**\n           * Assigns `value` to `key` of `object` if the existing value is not equivalent\n           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n           * for equality comparisons.\n           *\n           * @private\n           * @param {Object} object The object to modify.\n           * @param {string} key The key of the property to assign.\n           * @param {*} value The value to assign.\n           */\n          function assignValue(object, key, value) {\n            var objValue = object[key];\n            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n              baseAssignValue(object, key, value);\n            }\n          }\n\n          /**\n           * Gets the index at which the `key` is found in `array` of key-value pairs.\n           *\n           * @private\n           * @param {Array} array The array to inspect.\n           * @param {*} key The key to search for.\n           * @returns {number} Returns the index of the matched value, else `-1`.\n           */\n          function assocIndexOf(array, key) {\n            var length = array.length;\n            while (length--) {\n              if (eq(array[length][0], key)) {\n                return length;\n              }\n            }\n            return -1;\n          }\n\n          /**\n           * The base implementation of `assignValue` and `assignMergeValue` without\n           * value checks.\n           *\n           * @private\n           * @param {Object} object The object to modify.\n           * @param {string} key The key of the property to assign.\n           * @param {*} value The value to assign.\n           */\n          function baseAssignValue(object, key, value) {\n            if (key == '__proto__' && defineProperty) {\n              defineProperty(object, key, {\n                'configurable': true,\n                'enumerable': true,\n                'value': value,\n                'writable': true\n              });\n            } else {\n              object[key] = value;\n            }\n          }\n\n          /**\n           * The base implementation of `baseForOwn` which iterates over `object`\n           * properties returned by `keysFunc` and invokes `iteratee` for each property.\n           * Iteratee functions may exit iteration early by explicitly returning `false`.\n           *\n           * @private\n           * @param {Object} object The object to iterate over.\n           * @param {Function} iteratee The function invoked per iteration.\n           * @param {Function} keysFunc The function to get the keys of `object`.\n           * @returns {Object} Returns `object`.\n           */\n          var baseFor = createBaseFor();\n\n          /**\n           * The base implementation of `getTag` without fallbacks for buggy environments.\n           *\n           * @private\n           * @param {*} value The value to query.\n           * @returns {string} Returns the `toStringTag`.\n           */\n          function baseGetTag(value) {\n            if (value == null) {\n              return value === undefined ? undefinedTag : nullTag;\n            }\n            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n          }\n\n          /**\n           * The base implementation of `_.isArguments`.\n           *\n           * @private\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n           */\n          function baseIsArguments(value) {\n            return isObjectLike(value) && baseGetTag(value) == argsTag;\n          }\n\n          /**\n           * The base implementation of `_.isNative` without bad shim checks.\n           *\n           * @private\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a native function,\n           *  else `false`.\n           */\n          function baseIsNative(value) {\n            if (!isObject(value) || isMasked(value)) {\n              return false;\n            }\n            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n            return pattern.test(toSource(value));\n          }\n\n          /**\n           * The base implementation of `_.isTypedArray` without Node.js optimizations.\n           *\n           * @private\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n           */\n          function baseIsTypedArray(value) {\n            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n          }\n\n          /**\n           * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n           *\n           * @private\n           * @param {Object} object The object to query.\n           * @returns {Array} Returns the array of property names.\n           */\n          function baseKeysIn(object) {\n            if (!isObject(object)) {\n              return nativeKeysIn(object);\n            }\n            var isProto = isPrototype(object),\n              result = [];\n            for (var key in object) {\n              if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n                result.push(key);\n              }\n            }\n            return result;\n          }\n\n          /**\n           * The base implementation of `_.merge` without support for multiple sources.\n           *\n           * @private\n           * @param {Object} object The destination object.\n           * @param {Object} source The source object.\n           * @param {number} srcIndex The index of `source`.\n           * @param {Function} [customizer] The function to customize merged values.\n           * @param {Object} [stack] Tracks traversed source values and their merged\n           *  counterparts.\n           */\n          function baseMerge(object, source, srcIndex, customizer, stack) {\n            if (object === source) {\n              return;\n            }\n            baseFor(source, function (srcValue, key) {\n              stack || (stack = new Stack());\n              if (isObject(srcValue)) {\n                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n              } else {\n                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;\n                if (newValue === undefined) {\n                  newValue = srcValue;\n                }\n                assignMergeValue(object, key, newValue);\n              }\n            }, keysIn);\n          }\n\n          /**\n           * A specialized version of `baseMerge` for arrays and objects which performs\n           * deep merges and tracks traversed objects enabling objects with circular\n           * references to be merged.\n           *\n           * @private\n           * @param {Object} object The destination object.\n           * @param {Object} source The source object.\n           * @param {string} key The key of the value to merge.\n           * @param {number} srcIndex The index of `source`.\n           * @param {Function} mergeFunc The function to merge values.\n           * @param {Function} [customizer] The function to customize assigned values.\n           * @param {Object} [stack] Tracks traversed source values and their merged\n           *  counterparts.\n           */\n          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n            var objValue = safeGet(object, key),\n              srcValue = safeGet(source, key),\n              stacked = stack.get(srcValue);\n            if (stacked) {\n              assignMergeValue(object, key, stacked);\n              return;\n            }\n            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n            var isCommon = newValue === undefined;\n            if (isCommon) {\n              var isArr = isArray(srcValue),\n                isBuff = !isArr && isBuffer(srcValue),\n                isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n              newValue = srcValue;\n              if (isArr || isBuff || isTyped) {\n                if (isArray(objValue)) {\n                  newValue = objValue;\n                } else if (isArrayLikeObject(objValue)) {\n                  newValue = copyArray(objValue);\n                } else if (isBuff) {\n                  isCommon = false;\n                  newValue = cloneBuffer(srcValue, true);\n                } else if (isTyped) {\n                  isCommon = false;\n                  newValue = cloneTypedArray(srcValue, true);\n                } else {\n                  newValue = [];\n                }\n              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n                newValue = objValue;\n                if (isArguments(objValue)) {\n                  newValue = toPlainObject(objValue);\n                } else if (!isObject(objValue) || isFunction(objValue)) {\n                  newValue = initCloneObject(srcValue);\n                }\n              } else {\n                isCommon = false;\n              }\n            }\n            if (isCommon) {\n              // Recursively merge objects and arrays (susceptible to call stack limits).\n              stack.set(srcValue, newValue);\n              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n              stack['delete'](srcValue);\n            }\n            assignMergeValue(object, key, newValue);\n          }\n\n          /**\n           * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n           *\n           * @private\n           * @param {Function} func The function to apply a rest parameter to.\n           * @param {number} [start=func.length-1] The start position of the rest parameter.\n           * @returns {Function} Returns the new function.\n           */\n          function baseRest(func, start) {\n            return setToString(overRest(func, start, identity), func + '');\n          }\n\n          /**\n           * The base implementation of `setToString` without support for hot loop shorting.\n           *\n           * @private\n           * @param {Function} func The function to modify.\n           * @param {Function} string The `toString` result.\n           * @returns {Function} Returns `func`.\n           */\n          var baseSetToString = !defineProperty ? identity : function (func, string) {\n            return defineProperty(func, 'toString', {\n              'configurable': true,\n              'enumerable': false,\n              'value': constant(string),\n              'writable': true\n            });\n          };\n\n          /**\n           * Creates a clone of  `buffer`.\n           *\n           * @private\n           * @param {Buffer} buffer The buffer to clone.\n           * @param {boolean} [isDeep] Specify a deep clone.\n           * @returns {Buffer} Returns the cloned buffer.\n           */\n          function cloneBuffer(buffer, isDeep) {\n            if (isDeep) {\n              return buffer.slice();\n            }\n            var length = buffer.length,\n              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n            buffer.copy(result);\n            return result;\n          }\n\n          /**\n           * Creates a clone of `arrayBuffer`.\n           *\n           * @private\n           * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n           * @returns {ArrayBuffer} Returns the cloned array buffer.\n           */\n          function cloneArrayBuffer(arrayBuffer) {\n            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n            new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n            return result;\n          }\n\n          /**\n           * Creates a clone of `typedArray`.\n           *\n           * @private\n           * @param {Object} typedArray The typed array to clone.\n           * @param {boolean} [isDeep] Specify a deep clone.\n           * @returns {Object} Returns the cloned typed array.\n           */\n          function cloneTypedArray(typedArray, isDeep) {\n            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n          }\n\n          /**\n           * Copies the values of `source` to `array`.\n           *\n           * @private\n           * @param {Array} source The array to copy values from.\n           * @param {Array} [array=[]] The array to copy values to.\n           * @returns {Array} Returns `array`.\n           */\n          function copyArray(source, array) {\n            var index = -1,\n              length = source.length;\n            array || (array = Array(length));\n            while (++index < length) {\n              array[index] = source[index];\n            }\n            return array;\n          }\n\n          /**\n           * Copies properties of `source` to `object`.\n           *\n           * @private\n           * @param {Object} source The object to copy properties from.\n           * @param {Array} props The property identifiers to copy.\n           * @param {Object} [object={}] The object to copy properties to.\n           * @param {Function} [customizer] The function to customize copied values.\n           * @returns {Object} Returns `object`.\n           */\n          function copyObject(source, props, object, customizer) {\n            var isNew = !object;\n            object || (object = {});\n            var index = -1,\n              length = props.length;\n            while (++index < length) {\n              var key = props[index];\n              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n              if (newValue === undefined) {\n                newValue = source[key];\n              }\n              if (isNew) {\n                baseAssignValue(object, key, newValue);\n              } else {\n                assignValue(object, key, newValue);\n              }\n            }\n            return object;\n          }\n\n          /**\n           * Creates a function like `_.assign`.\n           *\n           * @private\n           * @param {Function} assigner The function to assign values.\n           * @returns {Function} Returns the new assigner function.\n           */\n          function createAssigner(assigner) {\n            return baseRest(function (object, sources) {\n              var index = -1,\n                length = sources.length,\n                customizer = length > 1 ? sources[length - 1] : undefined,\n                guard = length > 2 ? sources[2] : undefined;\n              customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;\n              if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n                customizer = length < 3 ? undefined : customizer;\n                length = 1;\n              }\n              object = Object(object);\n              while (++index < length) {\n                var source = sources[index];\n                if (source) {\n                  assigner(object, source, index, customizer);\n                }\n              }\n              return object;\n            });\n          }\n\n          /**\n           * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n           *\n           * @private\n           * @param {boolean} [fromRight] Specify iterating from right to left.\n           * @returns {Function} Returns the new base function.\n           */\n          function createBaseFor(fromRight) {\n            return function (object, iteratee, keysFunc) {\n              var index = -1,\n                iterable = Object(object),\n                props = keysFunc(object),\n                length = props.length;\n              while (length--) {\n                var key = props[fromRight ? length : ++index];\n                if (iteratee(iterable[key], key, iterable) === false) {\n                  break;\n                }\n              }\n              return object;\n            };\n          }\n\n          /**\n           * Gets the data for `map`.\n           *\n           * @private\n           * @param {Object} map The map to query.\n           * @param {string} key The reference key.\n           * @returns {*} Returns the map data.\n           */\n          function getMapData(map, key) {\n            var data = map.__data__;\n            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n          }\n\n          /**\n           * Gets the native function at `key` of `object`.\n           *\n           * @private\n           * @param {Object} object The object to query.\n           * @param {string} key The key of the method to get.\n           * @returns {*} Returns the function if it's native, else `undefined`.\n           */\n          function getNative(object, key) {\n            var value = getValue(object, key);\n            return baseIsNative(value) ? value : undefined;\n          }\n\n          /**\n           * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n           *\n           * @private\n           * @param {*} value The value to query.\n           * @returns {string} Returns the raw `toStringTag`.\n           */\n          function getRawTag(value) {\n            var isOwn = hasOwnProperty.call(value, symToStringTag),\n              tag = value[symToStringTag];\n            try {\n              value[symToStringTag] = undefined;\n              var unmasked = true;\n            } catch (e) {}\n            var result = nativeObjectToString.call(value);\n            if (unmasked) {\n              if (isOwn) {\n                value[symToStringTag] = tag;\n              } else {\n                delete value[symToStringTag];\n              }\n            }\n            return result;\n          }\n\n          /**\n           * Initializes an object clone.\n           *\n           * @private\n           * @param {Object} object The object to clone.\n           * @returns {Object} Returns the initialized clone.\n           */\n          function initCloneObject(object) {\n            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n          }\n\n          /**\n           * Checks if `value` is a valid array-like index.\n           *\n           * @private\n           * @param {*} value The value to check.\n           * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n           * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n           */\n          function isIndex(value, length) {\n            var type = typeof value;\n            length = length == null ? MAX_SAFE_INTEGER : length;\n            return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n          }\n\n          /**\n           * Checks if the given arguments are from an iteratee call.\n           *\n           * @private\n           * @param {*} value The potential iteratee value argument.\n           * @param {*} index The potential iteratee index or key argument.\n           * @param {*} object The potential iteratee object argument.\n           * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n           *  else `false`.\n           */\n          function isIterateeCall(value, index, object) {\n            if (!isObject(object)) {\n              return false;\n            }\n            var type = typeof index;\n            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n              return eq(object[index], value);\n            }\n            return false;\n          }\n\n          /**\n           * Checks if `value` is suitable for use as unique object key.\n           *\n           * @private\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n           */\n          function isKeyable(value) {\n            var type = typeof value;\n            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n          }\n\n          /**\n           * Checks if `func` has its source masked.\n           *\n           * @private\n           * @param {Function} func The function to check.\n           * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n           */\n          function isMasked(func) {\n            return !!maskSrcKey && maskSrcKey in func;\n          }\n\n          /**\n           * Checks if `value` is likely a prototype object.\n           *\n           * @private\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n           */\n          function isPrototype(value) {\n            var Ctor = value && value.constructor,\n              proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n            return value === proto;\n          }\n\n          /**\n           * This function is like\n           * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n           * except that it includes inherited enumerable properties.\n           *\n           * @private\n           * @param {Object} object The object to query.\n           * @returns {Array} Returns the array of property names.\n           */\n          function nativeKeysIn(object) {\n            var result = [];\n            if (object != null) {\n              for (var key in Object(object)) {\n                result.push(key);\n              }\n            }\n            return result;\n          }\n\n          /**\n           * Converts `value` to a string using `Object.prototype.toString`.\n           *\n           * @private\n           * @param {*} value The value to convert.\n           * @returns {string} Returns the converted string.\n           */\n          function objectToString(value) {\n            return nativeObjectToString.call(value);\n          }\n\n          /**\n           * A specialized version of `baseRest` which transforms the rest array.\n           *\n           * @private\n           * @param {Function} func The function to apply a rest parameter to.\n           * @param {number} [start=func.length-1] The start position of the rest parameter.\n           * @param {Function} transform The rest array transform.\n           * @returns {Function} Returns the new function.\n           */\n          function overRest(func, start, transform) {\n            start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n            return function () {\n              var args = arguments,\n                index = -1,\n                length = nativeMax(args.length - start, 0),\n                array = Array(length);\n              while (++index < length) {\n                array[index] = args[start + index];\n              }\n              index = -1;\n              var otherArgs = Array(start + 1);\n              while (++index < start) {\n                otherArgs[index] = args[index];\n              }\n              otherArgs[start] = transform(array);\n              return apply(func, this, otherArgs);\n            };\n          }\n\n          /**\n           * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n           *\n           * @private\n           * @param {Object} object The object to query.\n           * @param {string} key The key of the property to get.\n           * @returns {*} Returns the property value.\n           */\n          function safeGet(object, key) {\n            if (key === 'constructor' && typeof object[key] === 'function') {\n              return;\n            }\n            if (key == '__proto__') {\n              return;\n            }\n            return object[key];\n          }\n\n          /**\n           * Sets the `toString` method of `func` to return `string`.\n           *\n           * @private\n           * @param {Function} func The function to modify.\n           * @param {Function} string The `toString` result.\n           * @returns {Function} Returns `func`.\n           */\n          var setToString = shortOut(baseSetToString);\n\n          /**\n           * Creates a function that'll short out and invoke `identity` instead\n           * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n           * milliseconds.\n           *\n           * @private\n           * @param {Function} func The function to restrict.\n           * @returns {Function} Returns the new shortable function.\n           */\n          function shortOut(func) {\n            var count = 0,\n              lastCalled = 0;\n            return function () {\n              var stamp = nativeNow(),\n                remaining = HOT_SPAN - (stamp - lastCalled);\n              lastCalled = stamp;\n              if (remaining > 0) {\n                if (++count >= HOT_COUNT) {\n                  return arguments[0];\n                }\n              } else {\n                count = 0;\n              }\n              return func.apply(undefined, arguments);\n            };\n          }\n\n          /**\n           * Converts `func` to its source code.\n           *\n           * @private\n           * @param {Function} func The function to convert.\n           * @returns {string} Returns the source code.\n           */\n          function toSource(func) {\n            if (func != null) {\n              try {\n                return funcToString.call(func);\n              } catch (e) {}\n              try {\n                return func + '';\n              } catch (e) {}\n            }\n            return '';\n          }\n\n          /**\n           * Performs a\n           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n           * comparison between two values to determine if they are equivalent.\n           *\n           * @static\n           * @memberOf _\n           * @since 4.0.0\n           * @category Lang\n           * @param {*} value The value to compare.\n           * @param {*} other The other value to compare.\n           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n           * @example\n           *\n           * var object = { 'a': 1 };\n           * var other = { 'a': 1 };\n           *\n           * _.eq(object, object);\n           * // => true\n           *\n           * _.eq(object, other);\n           * // => false\n           *\n           * _.eq('a', 'a');\n           * // => true\n           *\n           * _.eq('a', Object('a'));\n           * // => false\n           *\n           * _.eq(NaN, NaN);\n           * // => true\n           */\n          function eq(value, other) {\n            return value === other || value !== value && other !== other;\n          }\n\n          /**\n           * Checks if `value` is likely an `arguments` object.\n           *\n           * @static\n           * @memberOf _\n           * @since 0.1.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n           *  else `false`.\n           * @example\n           *\n           * _.isArguments(function() { return arguments; }());\n           * // => true\n           *\n           * _.isArguments([1, 2, 3]);\n           * // => false\n           */\n          var isArguments = baseIsArguments(function () {\n            return arguments;\n          }()) ? baseIsArguments : function (value) {\n            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n          };\n\n          /**\n           * Checks if `value` is classified as an `Array` object.\n           *\n           * @static\n           * @memberOf _\n           * @since 0.1.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n           * @example\n           *\n           * _.isArray([1, 2, 3]);\n           * // => true\n           *\n           * _.isArray(document.body.children);\n           * // => false\n           *\n           * _.isArray('abc');\n           * // => false\n           *\n           * _.isArray(_.noop);\n           * // => false\n           */\n          var isArray = Array.isArray;\n\n          /**\n           * Checks if `value` is array-like. A value is considered array-like if it's\n           * not a function and has a `value.length` that's an integer greater than or\n           * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n           *\n           * @static\n           * @memberOf _\n           * @since 4.0.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n           * @example\n           *\n           * _.isArrayLike([1, 2, 3]);\n           * // => true\n           *\n           * _.isArrayLike(document.body.children);\n           * // => true\n           *\n           * _.isArrayLike('abc');\n           * // => true\n           *\n           * _.isArrayLike(_.noop);\n           * // => false\n           */\n          function isArrayLike(value) {\n            return value != null && isLength(value.length) && !isFunction(value);\n          }\n\n          /**\n           * This method is like `_.isArrayLike` except that it also checks if `value`\n           * is an object.\n           *\n           * @static\n           * @memberOf _\n           * @since 4.0.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is an array-like object,\n           *  else `false`.\n           * @example\n           *\n           * _.isArrayLikeObject([1, 2, 3]);\n           * // => true\n           *\n           * _.isArrayLikeObject(document.body.children);\n           * // => true\n           *\n           * _.isArrayLikeObject('abc');\n           * // => false\n           *\n           * _.isArrayLikeObject(_.noop);\n           * // => false\n           */\n          function isArrayLikeObject(value) {\n            return isObjectLike(value) && isArrayLike(value);\n          }\n\n          /**\n           * Checks if `value` is a buffer.\n           *\n           * @static\n           * @memberOf _\n           * @since 4.3.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n           * @example\n           *\n           * _.isBuffer(new Buffer(2));\n           * // => true\n           *\n           * _.isBuffer(new Uint8Array(2));\n           * // => false\n           */\n          var isBuffer = nativeIsBuffer || stubFalse;\n\n          /**\n           * Checks if `value` is classified as a `Function` object.\n           *\n           * @static\n           * @memberOf _\n           * @since 0.1.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n           * @example\n           *\n           * _.isFunction(_);\n           * // => true\n           *\n           * _.isFunction(/abc/);\n           * // => false\n           */\n          function isFunction(value) {\n            if (!isObject(value)) {\n              return false;\n            }\n            // The use of `Object#toString` avoids issues with the `typeof` operator\n            // in Safari 9 which returns 'object' for typed arrays and other constructors.\n            var tag = baseGetTag(value);\n            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n          }\n\n          /**\n           * Checks if `value` is a valid array-like length.\n           *\n           * **Note:** This method is loosely based on\n           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n           *\n           * @static\n           * @memberOf _\n           * @since 4.0.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n           * @example\n           *\n           * _.isLength(3);\n           * // => true\n           *\n           * _.isLength(Number.MIN_VALUE);\n           * // => false\n           *\n           * _.isLength(Infinity);\n           * // => false\n           *\n           * _.isLength('3');\n           * // => false\n           */\n          function isLength(value) {\n            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n          }\n\n          /**\n           * Checks if `value` is the\n           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n           *\n           * @static\n           * @memberOf _\n           * @since 0.1.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n           * @example\n           *\n           * _.isObject({});\n           * // => true\n           *\n           * _.isObject([1, 2, 3]);\n           * // => true\n           *\n           * _.isObject(_.noop);\n           * // => true\n           *\n           * _.isObject(null);\n           * // => false\n           */\n          function isObject(value) {\n            var type = typeof value;\n            return value != null && (type == 'object' || type == 'function');\n          }\n\n          /**\n           * Checks if `value` is object-like. A value is object-like if it's not `null`\n           * and has a `typeof` result of \"object\".\n           *\n           * @static\n           * @memberOf _\n           * @since 4.0.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n           * @example\n           *\n           * _.isObjectLike({});\n           * // => true\n           *\n           * _.isObjectLike([1, 2, 3]);\n           * // => true\n           *\n           * _.isObjectLike(_.noop);\n           * // => false\n           *\n           * _.isObjectLike(null);\n           * // => false\n           */\n          function isObjectLike(value) {\n            return value != null && typeof value == 'object';\n          }\n\n          /**\n           * Checks if `value` is a plain object, that is, an object created by the\n           * `Object` constructor or one with a `[[Prototype]]` of `null`.\n           *\n           * @static\n           * @memberOf _\n           * @since 0.8.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n           * @example\n           *\n           * function Foo() {\n           *   this.a = 1;\n           * }\n           *\n           * _.isPlainObject(new Foo);\n           * // => false\n           *\n           * _.isPlainObject([1, 2, 3]);\n           * // => false\n           *\n           * _.isPlainObject({ 'x': 0, 'y': 0 });\n           * // => true\n           *\n           * _.isPlainObject(Object.create(null));\n           * // => true\n           */\n          function isPlainObject(value) {\n            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n              return false;\n            }\n            var proto = getPrototype(value);\n            if (proto === null) {\n              return true;\n            }\n            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n          }\n\n          /**\n           * Checks if `value` is classified as a typed array.\n           *\n           * @static\n           * @memberOf _\n           * @since 3.0.0\n           * @category Lang\n           * @param {*} value The value to check.\n           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n           * @example\n           *\n           * _.isTypedArray(new Uint8Array);\n           * // => true\n           *\n           * _.isTypedArray([]);\n           * // => false\n           */\n          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n          /**\n           * Converts `value` to a plain object flattening inherited enumerable string\n           * keyed properties of `value` to own properties of the plain object.\n           *\n           * @static\n           * @memberOf _\n           * @since 3.0.0\n           * @category Lang\n           * @param {*} value The value to convert.\n           * @returns {Object} Returns the converted plain object.\n           * @example\n           *\n           * function Foo() {\n           *   this.b = 2;\n           * }\n           *\n           * Foo.prototype.c = 3;\n           *\n           * _.assign({ 'a': 1 }, new Foo);\n           * // => { 'a': 1, 'b': 2 }\n           *\n           * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n           * // => { 'a': 1, 'b': 2, 'c': 3 }\n           */\n          function toPlainObject(value) {\n            return copyObject(value, keysIn(value));\n          }\n\n          /**\n           * Creates an array of the own and inherited enumerable property names of `object`.\n           *\n           * **Note:** Non-object values are coerced to objects.\n           *\n           * @static\n           * @memberOf _\n           * @since 3.0.0\n           * @category Object\n           * @param {Object} object The object to query.\n           * @returns {Array} Returns the array of property names.\n           * @example\n           *\n           * function Foo() {\n           *   this.a = 1;\n           *   this.b = 2;\n           * }\n           *\n           * Foo.prototype.c = 3;\n           *\n           * _.keysIn(new Foo);\n           * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n           */\n          function keysIn(object) {\n            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n          }\n\n          /**\n           * This method is like `_.assign` except that it recursively merges own and\n           * inherited enumerable string keyed properties of source objects into the\n           * destination object. Source properties that resolve to `undefined` are\n           * skipped if a destination value exists. Array and plain object properties\n           * are merged recursively. Other objects and value types are overridden by\n           * assignment. Source objects are applied from left to right. Subsequent\n           * sources overwrite property assignments of previous sources.\n           *\n           * **Note:** This method mutates `object`.\n           *\n           * @static\n           * @memberOf _\n           * @since 0.5.0\n           * @category Object\n           * @param {Object} object The destination object.\n           * @param {...Object} [sources] The source objects.\n           * @returns {Object} Returns `object`.\n           * @example\n           *\n           * var object = {\n           *   'a': [{ 'b': 2 }, { 'd': 4 }]\n           * };\n           *\n           * var other = {\n           *   'a': [{ 'c': 3 }, { 'e': 5 }]\n           * };\n           *\n           * _.merge(object, other);\n           * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n           */\n          var merge = createAssigner(function (object, source, srcIndex) {\n            baseMerge(object, source, srcIndex);\n          });\n\n          /**\n           * Creates a function that returns `value`.\n           *\n           * @static\n           * @memberOf _\n           * @since 2.4.0\n           * @category Util\n           * @param {*} value The value to return from the new function.\n           * @returns {Function} Returns the new constant function.\n           * @example\n           *\n           * var objects = _.times(2, _.constant({ 'a': 1 }));\n           *\n           * console.log(objects);\n           * // => [{ 'a': 1 }, { 'a': 1 }]\n           *\n           * console.log(objects[0] === objects[1]);\n           * // => true\n           */\n          function constant(value) {\n            return function () {\n              return value;\n            };\n          }\n\n          /**\n           * This method returns the first argument it receives.\n           *\n           * @static\n           * @since 0.1.0\n           * @memberOf _\n           * @category Util\n           * @param {*} value Any value.\n           * @returns {*} Returns `value`.\n           * @example\n           *\n           * var object = { 'a': 1 };\n           *\n           * console.log(_.identity(object) === object);\n           * // => true\n           */\n          function identity(value) {\n            return value;\n          }\n\n          /**\n           * This method returns `false`.\n           *\n           * @static\n           * @memberOf _\n           * @since 4.13.0\n           * @category Util\n           * @returns {boolean} Returns `false`.\n           * @example\n           *\n           * _.times(2, _.stubFalse);\n           * // => [false, false]\n           */\n          function stubFalse() {\n            return false;\n          }\n          module.exports = merge;\n        }).call(this);\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    2: [function (require, module, exports) {\n      /*! For license information please see shifty.js.LICENSE.txt */\n      !function (t, n) {\n        \"object\" == typeof exports && \"object\" == typeof module ? module.exports = n() : \"function\" == typeof define && define.amd ? define(\"shifty\", [], n) : \"object\" == typeof exports ? exports.shifty = n() : t.shifty = n();\n      }(self, function () {\n        return function () {\n          \"use strict\";\n\n          var t = {\n              720: function (t, n, e) {\n                e.r(n), e.d(n, {\n                  Scene: function () {\n                    return sn;\n                  },\n                  Tweenable: function () {\n                    return kt;\n                  },\n                  interpolate: function () {\n                    return nn;\n                  },\n                  processTweens: function () {\n                    return dt;\n                  },\n                  setBezierFunction: function () {\n                    return $;\n                  },\n                  shouldScheduleUpdate: function () {\n                    return bt;\n                  },\n                  tween: function () {\n                    return Pt;\n                  },\n                  unsetBezierFunction: function () {\n                    return L;\n                  }\n                });\n                var r = {};\n                e.r(r), e.d(r, {\n                  bounce: function () {\n                    return D;\n                  },\n                  bouncePast: function () {\n                    return q;\n                  },\n                  easeFrom: function () {\n                    return B;\n                  },\n                  easeFromTo: function () {\n                    return Q;\n                  },\n                  easeInBack: function () {\n                    return E;\n                  },\n                  easeInCirc: function () {\n                    return j;\n                  },\n                  easeInCubic: function () {\n                    return c;\n                  },\n                  easeInExpo: function () {\n                    return w;\n                  },\n                  easeInOutBack: function () {\n                    return T;\n                  },\n                  easeInOutCirc: function () {\n                    return P;\n                  },\n                  easeInOutCubic: function () {\n                    return l;\n                  },\n                  easeInOutExpo: function () {\n                    return S;\n                  },\n                  easeInOutQuad: function () {\n                    return s;\n                  },\n                  easeInOutQuart: function () {\n                    return v;\n                  },\n                  easeInOutQuint: function () {\n                    return d;\n                  },\n                  easeInOutSine: function () {\n                    return b;\n                  },\n                  easeInQuad: function () {\n                    return u;\n                  },\n                  easeInQuart: function () {\n                    return h;\n                  },\n                  easeInQuint: function () {\n                    return y;\n                  },\n                  easeInSine: function () {\n                    return g;\n                  },\n                  easeOutBack: function () {\n                    return A;\n                  },\n                  easeOutBounce: function () {\n                    return M;\n                  },\n                  easeOutCirc: function () {\n                    return k;\n                  },\n                  easeOutCubic: function () {\n                    return f;\n                  },\n                  easeOutExpo: function () {\n                    return O;\n                  },\n                  easeOutQuad: function () {\n                    return a;\n                  },\n                  easeOutQuart: function () {\n                    return p;\n                  },\n                  easeOutQuint: function () {\n                    return _;\n                  },\n                  easeOutSine: function () {\n                    return m;\n                  },\n                  easeTo: function () {\n                    return N;\n                  },\n                  elastic: function () {\n                    return I;\n                  },\n                  linear: function () {\n                    return o;\n                  },\n                  swingFrom: function () {\n                    return x;\n                  },\n                  swingFromTo: function () {\n                    return F;\n                  },\n                  swingTo: function () {\n                    return C;\n                  }\n                });\n                var i = {};\n                e.r(i), e.d(i, {\n                  afterTween: function () {\n                    return Jt;\n                  },\n                  beforeTween: function () {\n                    return Ht;\n                  },\n                  doesApply: function () {\n                    return Wt;\n                  },\n                  tweenCreated: function () {\n                    return Gt;\n                  }\n                });\n                var o = function (t) {\n                    return t;\n                  },\n                  u = function (t) {\n                    return Math.pow(t, 2);\n                  },\n                  a = function (t) {\n                    return -(Math.pow(t - 1, 2) - 1);\n                  },\n                  s = function (t) {\n                    return (t /= .5) < 1 ? .5 * Math.pow(t, 2) : -.5 * ((t -= 2) * t - 2);\n                  },\n                  c = function (t) {\n                    return Math.pow(t, 3);\n                  },\n                  f = function (t) {\n                    return Math.pow(t - 1, 3) + 1;\n                  },\n                  l = function (t) {\n                    return (t /= .5) < 1 ? .5 * Math.pow(t, 3) : .5 * (Math.pow(t - 2, 3) + 2);\n                  },\n                  h = function (t) {\n                    return Math.pow(t, 4);\n                  },\n                  p = function (t) {\n                    return -(Math.pow(t - 1, 4) - 1);\n                  },\n                  v = function (t) {\n                    return (t /= .5) < 1 ? .5 * Math.pow(t, 4) : -.5 * ((t -= 2) * Math.pow(t, 3) - 2);\n                  },\n                  y = function (t) {\n                    return Math.pow(t, 5);\n                  },\n                  _ = function (t) {\n                    return Math.pow(t - 1, 5) + 1;\n                  },\n                  d = function (t) {\n                    return (t /= .5) < 1 ? .5 * Math.pow(t, 5) : .5 * (Math.pow(t - 2, 5) + 2);\n                  },\n                  g = function (t) {\n                    return 1 - Math.cos(t * (Math.PI / 2));\n                  },\n                  m = function (t) {\n                    return Math.sin(t * (Math.PI / 2));\n                  },\n                  b = function (t) {\n                    return -.5 * (Math.cos(Math.PI * t) - 1);\n                  },\n                  w = function (t) {\n                    return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));\n                  },\n                  O = function (t) {\n                    return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n                  },\n                  S = function (t) {\n                    return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * --t));\n                  },\n                  j = function (t) {\n                    return -(Math.sqrt(1 - t * t) - 1);\n                  },\n                  k = function (t) {\n                    return Math.sqrt(1 - Math.pow(t - 1, 2));\n                  },\n                  P = function (t) {\n                    return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n                  },\n                  M = function (t) {\n                    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n                  },\n                  E = function (t) {\n                    var n = 1.70158;\n                    return t * t * ((n + 1) * t - n);\n                  },\n                  A = function (t) {\n                    var n = 1.70158;\n                    return (t -= 1) * t * ((n + 1) * t + n) + 1;\n                  },\n                  T = function (t) {\n                    var n = 1.70158;\n                    return (t /= .5) < 1 ? t * t * ((1 + (n *= 1.525)) * t - n) * .5 : .5 * ((t -= 2) * t * ((1 + (n *= 1.525)) * t + n) + 2);\n                  },\n                  I = function (t) {\n                    return -1 * Math.pow(4, -8 * t) * Math.sin((6 * t - 1) * (2 * Math.PI) / 2) + 1;\n                  },\n                  F = function (t) {\n                    var n = 1.70158;\n                    return (t /= .5) < 1 ? t * t * ((1 + (n *= 1.525)) * t - n) * .5 : .5 * ((t -= 2) * t * ((1 + (n *= 1.525)) * t + n) + 2);\n                  },\n                  x = function (t) {\n                    var n = 1.70158;\n                    return t * t * ((n + 1) * t - n);\n                  },\n                  C = function (t) {\n                    var n = 1.70158;\n                    return (t -= 1) * t * ((n + 1) * t + n) + 1;\n                  },\n                  D = function (t) {\n                    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n                  },\n                  q = function (t) {\n                    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 2 - (7.5625 * (t -= 1.5 / 2.75) * t + .75) : t < 2.5 / 2.75 ? 2 - (7.5625 * (t -= 2.25 / 2.75) * t + .9375) : 2 - (7.5625 * (t -= 2.625 / 2.75) * t + .984375);\n                  },\n                  Q = function (t) {\n                    return (t /= .5) < 1 ? .5 * Math.pow(t, 4) : -.5 * ((t -= 2) * Math.pow(t, 3) - 2);\n                  },\n                  B = function (t) {\n                    return Math.pow(t, 4);\n                  },\n                  N = function (t) {\n                    return Math.pow(t, .25);\n                  };\n                function R(t, n, e, r, i, o) {\n                  var u,\n                    a,\n                    s,\n                    c,\n                    f,\n                    l = 0,\n                    h = 0,\n                    p = 0,\n                    v = function (t) {\n                      return ((l * t + h) * t + p) * t;\n                    },\n                    y = function (t) {\n                      return (3 * l * t + 2 * h) * t + p;\n                    },\n                    _ = function (t) {\n                      return t >= 0 ? t : 0 - t;\n                    };\n                  return l = 1 - (p = 3 * n) - (h = 3 * (r - n) - p), s = 1 - (f = 3 * e) - (c = 3 * (i - e) - f), u = t, a = function (t) {\n                    return 1 / (200 * t);\n                  }(o), function (t) {\n                    return ((s * t + c) * t + f) * t;\n                  }(function (t, n) {\n                    var e, r, i, o, u, a;\n                    for (i = t, a = 0; a < 8; a++) {\n                      if (o = v(i) - t, _(o) < n) return i;\n                      if (u = y(i), _(u) < 1e-6) break;\n                      i -= o / u;\n                    }\n                    if ((i = t) < (e = 0)) return e;\n                    if (i > (r = 1)) return r;\n                    for (; e < r;) {\n                      if (o = v(i), _(o - t) < n) return i;\n                      t > o ? e = i : r = i, i = .5 * (r - e) + e;\n                    }\n                    return i;\n                  }(u, a));\n                }\n                var z,\n                  U = function () {\n                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : .25,\n                      n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .25,\n                      e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .75,\n                      r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .75;\n                    return function (i) {\n                      return R(i, t, n, e, r, 1);\n                    };\n                  },\n                  $ = function (t, n, e, r, i) {\n                    var o = U(n, e, r, i);\n                    return o.displayName = t, o.x1 = n, o.y1 = e, o.x2 = r, o.y2 = i, kt.formulas[t] = o;\n                  },\n                  L = function (t) {\n                    return delete kt.formulas[t];\n                  };\n                function V(t, n) {\n                  if (!(t instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n                }\n                function W(t, n) {\n                  for (var e = 0; e < n.length; e++) {\n                    var r = n[e];\n                    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n                  }\n                }\n                function G(t) {\n                  return G = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n                    return typeof t;\n                  } : function (t) {\n                    return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n                  }, G(t);\n                }\n                function H(t) {\n                  return function (t) {\n                    if (Array.isArray(t)) return J(t);\n                  }(t) || function (t) {\n                    if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t);\n                  }(t) || function (t, n) {\n                    if (t) {\n                      if (\"string\" == typeof t) return J(t, n);\n                      var e = Object.prototype.toString.call(t).slice(8, -1);\n                      return \"Object\" === e && t.constructor && (e = t.constructor.name), \"Map\" === e || \"Set\" === e ? Array.from(t) : \"Arguments\" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? J(t, n) : void 0;\n                    }\n                  }(t) || function () {\n                    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                  }();\n                }\n                function J(t, n) {\n                  (null == n || n > t.length) && (n = t.length);\n                  for (var e = 0, r = new Array(n); e < n; e++) r[e] = t[e];\n                  return r;\n                }\n                function K(t, n) {\n                  var e = Object.keys(t);\n                  if (Object.getOwnPropertySymbols) {\n                    var r = Object.getOwnPropertySymbols(t);\n                    n && (r = r.filter(function (n) {\n                      return Object.getOwnPropertyDescriptor(t, n).enumerable;\n                    })), e.push.apply(e, r);\n                  }\n                  return e;\n                }\n                function X(t) {\n                  for (var n = 1; n < arguments.length; n++) {\n                    var e = null != arguments[n] ? arguments[n] : {};\n                    n % 2 ? K(Object(e), !0).forEach(function (n) {\n                      Y(t, n, e[n]);\n                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(e)) : K(Object(e)).forEach(function (n) {\n                      Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(e, n));\n                    });\n                  }\n                  return t;\n                }\n                function Y(t, n, e) {\n                  return n in t ? Object.defineProperty(t, n, {\n                    value: e,\n                    enumerable: !0,\n                    configurable: !0,\n                    writable: !0\n                  }) : t[n] = e, t;\n                }\n                var Z,\n                  tt,\n                  nt,\n                  et = \"linear\",\n                  rt = \"undefined\" != typeof window ? window : e.g,\n                  it = \"afterTween\",\n                  ot = \"afterTweenEnd\",\n                  ut = \"beforeTween\",\n                  at = \"tweenCreated\",\n                  st = \"function\",\n                  ct = \"string\",\n                  ft = rt.requestAnimationFrame || rt.webkitRequestAnimationFrame || rt.oRequestAnimationFrame || rt.msRequestAnimationFrame || rt.mozCancelRequestAnimationFrame && rt.mozRequestAnimationFrame || setTimeout,\n                  lt = function () {},\n                  ht = null,\n                  pt = null,\n                  vt = X({}, r),\n                  yt = function (t, n, e, r, i, o, u) {\n                    var a,\n                      s,\n                      c,\n                      f = t < o ? 0 : (t - o) / i,\n                      l = !1;\n                    for (var h in u && u.call && (l = !0, a = u(f)), n) l || (a = ((s = u[h]).call ? s : vt[s])(f)), c = e[h], n[h] = c + (r[h] - c) * a;\n                    return n;\n                  },\n                  _t = function (t, n) {\n                    var e = t._timestamp,\n                      r = t._currentState,\n                      i = t._delay;\n                    if (!(n < e + i)) {\n                      var o = t._duration,\n                        u = t._targetState,\n                        a = e + i + o,\n                        s = n > a ? a : n;\n                      t._hasEnded = s >= a;\n                      var c = o - (a - s),\n                        f = t._filters.length > 0;\n                      if (t._hasEnded) return t._render(u, t._data, c), t.stop(!0);\n                      f && t._applyFilter(ut), s < e + i ? e = o = s = 1 : e += i, yt(s, r, t._originalState, u, o, e, t._easing), f && t._applyFilter(it), t._render(r, t._data, c);\n                    }\n                  },\n                  dt = function () {\n                    for (var t, n = kt.now(), e = ht; e;) t = e._next, _t(e, n), e = t;\n                  },\n                  gt = Date.now || function () {\n                    return +new Date();\n                  },\n                  mt = !1,\n                  bt = function (t) {\n                    t && mt || (mt = t, t && wt());\n                  },\n                  wt = function t() {\n                    Z = gt(), mt && ft.call(rt, t, 16.666666666666668), dt();\n                  },\n                  Ot = function (t) {\n                    var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : et,\n                      e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n                    if (Array.isArray(n)) {\n                      var r = U.apply(void 0, H(n));\n                      return r;\n                    }\n                    var i = G(n);\n                    if (vt[n]) return vt[n];\n                    if (i === ct || i === st) for (var o in t) e[o] = n;else for (var u in t) e[u] = n[u] || et;\n                    return e;\n                  },\n                  St = function (t) {\n                    t === ht ? (ht = t._next) ? ht._previous = null : pt = null : t === pt ? (pt = t._previous) ? pt._next = null : ht = null : (tt = t._previous, nt = t._next, tt._next = nt, nt._previous = tt), t._previous = t._next = null;\n                  },\n                  jt = \"function\" == typeof Promise ? Promise : null;\n                z = Symbol.toStringTag;\n                var kt = function () {\n                  function t() {\n                    var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n                      e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;\n                    V(this, t), Y(this, z, \"Promise\"), this._config = {}, this._data = {}, this._delay = 0, this._filters = [], this._next = null, this._previous = null, this._timestamp = null, this._hasEnded = !1, this._resolve = null, this._reject = null, this._currentState = n || {}, this._originalState = {}, this._targetState = {}, this._start = lt, this._render = lt, this._promiseCtor = jt, e && this.setConfig(e);\n                  }\n                  var n, e;\n                  return n = t, e = [{\n                    key: \"_applyFilter\",\n                    value: function (t) {\n                      for (var n = this._filters.length; n > 0; n--) {\n                        var e = this._filters[n - n][t];\n                        e && e(this);\n                      }\n                    }\n                  }, {\n                    key: \"tween\",\n                    value: function () {\n                      var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;\n                      return this._isPlaying && this.stop(), !n && this._config || this.setConfig(n), this._pausedAtTime = null, this._timestamp = t.now(), this._start(this.get(), this._data), this._delay && this._render(this._currentState, this._data, 0), this._resume(this._timestamp);\n                    }\n                  }, {\n                    key: \"setConfig\",\n                    value: function () {\n                      var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n                        e = this._config;\n                      for (var r in n) e[r] = n[r];\n                      var i = e.promise,\n                        o = void 0 === i ? this._promiseCtor : i,\n                        u = e.start,\n                        a = void 0 === u ? lt : u,\n                        s = e.finish,\n                        c = e.render,\n                        f = void 0 === c ? this._config.step || lt : c,\n                        l = e.step,\n                        h = void 0 === l ? lt : l;\n                      this._data = e.data || e.attachment || this._data, this._isPlaying = !1, this._pausedAtTime = null, this._scheduleId = null, this._delay = n.delay || 0, this._start = a, this._render = f || h, this._duration = e.duration || 500, this._promiseCtor = o, s && (this._resolve = s);\n                      var p = n.from,\n                        v = n.to,\n                        y = void 0 === v ? {} : v,\n                        _ = this._currentState,\n                        d = this._originalState,\n                        g = this._targetState;\n                      for (var m in p) _[m] = p[m];\n                      var b = !1;\n                      for (var w in _) {\n                        var O = _[w];\n                        b || G(O) !== ct || (b = !0), d[w] = O, g[w] = y.hasOwnProperty(w) ? y[w] : O;\n                      }\n                      if (this._easing = Ot(this._currentState, e.easing, this._easing), this._filters.length = 0, b) {\n                        for (var S in t.filters) t.filters[S].doesApply(this) && this._filters.push(t.filters[S]);\n                        this._applyFilter(at);\n                      }\n                      return this;\n                    }\n                  }, {\n                    key: \"then\",\n                    value: function (t, n) {\n                      var e = this;\n                      return this._promise = new this._promiseCtor(function (t, n) {\n                        e._resolve = t, e._reject = n;\n                      }), this._promise.then(t, n);\n                    }\n                  }, {\n                    key: \"catch\",\n                    value: function (t) {\n                      return this.then().catch(t);\n                    }\n                  }, {\n                    key: \"finally\",\n                    value: function (t) {\n                      return this.then().finally(t);\n                    }\n                  }, {\n                    key: \"get\",\n                    value: function () {\n                      return X({}, this._currentState);\n                    }\n                  }, {\n                    key: \"set\",\n                    value: function (t) {\n                      this._currentState = t;\n                    }\n                  }, {\n                    key: \"pause\",\n                    value: function () {\n                      if (this._isPlaying) return this._pausedAtTime = t.now(), this._isPlaying = !1, St(this), this;\n                    }\n                  }, {\n                    key: \"resume\",\n                    value: function () {\n                      return this._resume();\n                    }\n                  }, {\n                    key: \"_resume\",\n                    value: function () {\n                      var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t.now();\n                      return null === this._timestamp ? this.tween() : this._isPlaying ? this._promise : (this._pausedAtTime && (this._timestamp += n - this._pausedAtTime, this._pausedAtTime = null), this._isPlaying = !0, null === ht ? (ht = this, pt = this) : (this._previous = pt, pt._next = this, pt = this), this);\n                    }\n                  }, {\n                    key: \"seek\",\n                    value: function (n) {\n                      n = Math.max(n, 0);\n                      var e = t.now();\n                      return this._timestamp + n === 0 || (this._timestamp = e - n, _t(this, e)), this;\n                    }\n                  }, {\n                    key: \"stop\",\n                    value: function () {\n                      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n                      if (!this._isPlaying) return this;\n                      this._isPlaying = !1, St(this);\n                      var n = this._filters.length > 0;\n                      return t && (n && this._applyFilter(ut), yt(1, this._currentState, this._originalState, this._targetState, 1, 0, this._easing), n && (this._applyFilter(it), this._applyFilter(ot))), this._resolve && this._resolve({\n                        data: this._data,\n                        state: this._currentState,\n                        tweenable: this\n                      }), this._resolve = null, this._reject = null, this;\n                    }\n                  }, {\n                    key: \"cancel\",\n                    value: function () {\n                      var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n                        n = this._currentState,\n                        e = this._data,\n                        r = this._isPlaying;\n                      return r ? (this._reject && this._reject({\n                        data: e,\n                        state: n,\n                        tweenable: this\n                      }), this._resolve = null, this._reject = null, this.stop(t)) : this;\n                    }\n                  }, {\n                    key: \"isPlaying\",\n                    value: function () {\n                      return this._isPlaying;\n                    }\n                  }, {\n                    key: \"hasEnded\",\n                    value: function () {\n                      return this._hasEnded;\n                    }\n                  }, {\n                    key: \"setScheduleFunction\",\n                    value: function (n) {\n                      t.setScheduleFunction(n);\n                    }\n                  }, {\n                    key: \"data\",\n                    value: function () {\n                      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n                      return t && (this._data = X({}, t)), this._data;\n                    }\n                  }, {\n                    key: \"dispose\",\n                    value: function () {\n                      for (var t in this) delete this[t];\n                    }\n                  }], e && W(n.prototype, e), t;\n                }();\n                function Pt() {\n                  var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n                    n = new kt();\n                  return n.tween(t), n.tweenable = n, n;\n                }\n                Y(kt, \"now\", function () {\n                  return Z;\n                }), Y(kt, \"setScheduleFunction\", function (t) {\n                  return ft = t;\n                }), Y(kt, \"filters\", {}), Y(kt, \"formulas\", vt), bt(!0);\n                var Mt,\n                  Et,\n                  At = /(\\d|-|\\.)/,\n                  Tt = /([^\\-0-9.]+)/g,\n                  It = /[0-9.-]+/g,\n                  Ft = (Mt = It.source, Et = /,\\s*/.source, new RegExp(\"rgba?\\\\(\".concat(Mt).concat(Et).concat(Mt).concat(Et).concat(Mt, \"(\").concat(Et).concat(Mt, \")?\\\\)\"), \"g\")),\n                  xt = /^.*\\(/,\n                  Ct = /#([0-9]|[a-f]){3,6}/gi,\n                  Dt = \"VAL\",\n                  qt = function (t, n) {\n                    return t.map(function (t, e) {\n                      return \"_\".concat(n, \"_\").concat(e);\n                    });\n                  };\n                function Qt(t) {\n                  return parseInt(t, 16);\n                }\n                var Bt = function (t) {\n                    return \"rgb(\".concat((n = t, 3 === (n = n.replace(/#/, \"\")).length && (n = (n = n.split(\"\"))[0] + n[0] + n[1] + n[1] + n[2] + n[2]), [Qt(n.substr(0, 2)), Qt(n.substr(2, 2)), Qt(n.substr(4, 2))]).join(\",\"), \")\");\n                    var n;\n                  },\n                  Nt = function (t, n, e) {\n                    var r = n.match(t),\n                      i = n.replace(t, Dt);\n                    return r && r.forEach(function (t) {\n                      return i = i.replace(Dt, e(t));\n                    }), i;\n                  },\n                  Rt = function (t) {\n                    for (var n in t) {\n                      var e = t[n];\n                      \"string\" == typeof e && e.match(Ct) && (t[n] = Nt(Ct, e, Bt));\n                    }\n                  },\n                  zt = function (t) {\n                    var n = t.match(It),\n                      e = n.slice(0, 3).map(Math.floor),\n                      r = t.match(xt)[0];\n                    if (3 === n.length) return \"\".concat(r).concat(e.join(\",\"), \")\");\n                    if (4 === n.length) return \"\".concat(r).concat(e.join(\",\"), \",\").concat(n[3], \")\");\n                    throw new Error(\"Invalid rgbChunk: \".concat(t));\n                  },\n                  Ut = function (t) {\n                    return t.match(It);\n                  },\n                  $t = function (t, n) {\n                    var e = {};\n                    return n.forEach(function (n) {\n                      e[n] = t[n], delete t[n];\n                    }), e;\n                  },\n                  Lt = function (t, n) {\n                    return n.map(function (n) {\n                      return t[n];\n                    });\n                  },\n                  Vt = function (t, n) {\n                    return n.forEach(function (n) {\n                      return t = t.replace(Dt, +n.toFixed(4));\n                    }), t;\n                  },\n                  Wt = function (t) {\n                    for (var n in t._currentState) if (\"string\" == typeof t._currentState[n]) return !0;\n                    return !1;\n                  };\n                function Gt(t) {\n                  var n = t._currentState;\n                  [n, t._originalState, t._targetState].forEach(Rt), t._tokenData = function (t) {\n                    var n,\n                      e,\n                      r = {};\n                    for (var i in t) {\n                      var o = t[i];\n                      \"string\" == typeof o && (r[i] = {\n                        formatString: (n = o, e = void 0, e = n.match(Tt), e ? (1 === e.length || n.charAt(0).match(At)) && e.unshift(\"\") : e = [\"\", \"\"], e.join(Dt)),\n                        chunkNames: qt(Ut(o), i)\n                      });\n                    }\n                    return r;\n                  }(n);\n                }\n                function Ht(t) {\n                  var n = t._currentState,\n                    e = t._originalState,\n                    r = t._targetState,\n                    i = t._easing,\n                    o = t._tokenData;\n                  !function (t, n) {\n                    var e = function (e) {\n                      var r = n[e].chunkNames,\n                        i = t[e];\n                      if (\"string\" == typeof i) {\n                        var o = i.split(\" \"),\n                          u = o[o.length - 1];\n                        r.forEach(function (n, e) {\n                          return t[n] = o[e] || u;\n                        });\n                      } else r.forEach(function (n) {\n                        return t[n] = i;\n                      });\n                      delete t[e];\n                    };\n                    for (var r in n) e(r);\n                  }(i, o), [n, e, r].forEach(function (t) {\n                    return function (t, n) {\n                      var e = function (e) {\n                        Ut(t[e]).forEach(function (r, i) {\n                          return t[n[e].chunkNames[i]] = +r;\n                        }), delete t[e];\n                      };\n                      for (var r in n) e(r);\n                    }(t, o);\n                  });\n                }\n                function Jt(t) {\n                  var n = t._currentState,\n                    e = t._originalState,\n                    r = t._targetState,\n                    i = t._easing,\n                    o = t._tokenData;\n                  [n, e, r].forEach(function (t) {\n                    return function (t, n) {\n                      for (var e in n) {\n                        var r = n[e],\n                          i = r.chunkNames,\n                          o = r.formatString,\n                          u = Vt(o, Lt($t(t, i), i));\n                        t[e] = Nt(Ft, u, zt);\n                      }\n                    }(t, o);\n                  }), function (t, n) {\n                    for (var e in n) {\n                      var r = n[e].chunkNames,\n                        i = t[r[0]];\n                      t[e] = \"string\" == typeof i ? r.map(function (n) {\n                        var e = t[n];\n                        return delete t[n], e;\n                      }).join(\" \") : i;\n                    }\n                  }(i, o);\n                }\n                function Kt(t, n) {\n                  var e = Object.keys(t);\n                  if (Object.getOwnPropertySymbols) {\n                    var r = Object.getOwnPropertySymbols(t);\n                    n && (r = r.filter(function (n) {\n                      return Object.getOwnPropertyDescriptor(t, n).enumerable;\n                    })), e.push.apply(e, r);\n                  }\n                  return e;\n                }\n                function Xt(t) {\n                  for (var n = 1; n < arguments.length; n++) {\n                    var e = null != arguments[n] ? arguments[n] : {};\n                    n % 2 ? Kt(Object(e), !0).forEach(function (n) {\n                      Yt(t, n, e[n]);\n                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(e)) : Kt(Object(e)).forEach(function (n) {\n                      Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(e, n));\n                    });\n                  }\n                  return t;\n                }\n                function Yt(t, n, e) {\n                  return n in t ? Object.defineProperty(t, n, {\n                    value: e,\n                    enumerable: !0,\n                    configurable: !0,\n                    writable: !0\n                  }) : t[n] = e, t;\n                }\n                var Zt = new kt(),\n                  tn = kt.filters,\n                  nn = function (t, n, e, r) {\n                    var i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,\n                      o = Xt({}, t),\n                      u = Ot(t, r);\n                    for (var a in Zt._filters.length = 0, Zt.set({}), Zt._currentState = o, Zt._originalState = t, Zt._targetState = n, Zt._easing = u, tn) tn[a].doesApply(Zt) && Zt._filters.push(tn[a]);\n                    Zt._applyFilter(\"tweenCreated\"), Zt._applyFilter(\"beforeTween\");\n                    var s = yt(e, o, t, n, 1, i, u);\n                    return Zt._applyFilter(\"afterTween\"), s;\n                  };\n                function en(t, n) {\n                  (null == n || n > t.length) && (n = t.length);\n                  for (var e = 0, r = new Array(n); e < n; e++) r[e] = t[e];\n                  return r;\n                }\n                function rn(t, n) {\n                  if (!(t instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n                }\n                function on(t, n) {\n                  for (var e = 0; e < n.length; e++) {\n                    var r = n[e];\n                    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n                  }\n                }\n                function un(t, n) {\n                  var e = n.get(t);\n                  if (!e) throw new TypeError(\"attempted to get private field on non-instance\");\n                  return e.get ? e.get.call(t) : e.value;\n                }\n                var an = new WeakMap(),\n                  sn = function () {\n                    function t() {\n                      rn(this, t), an.set(this, {\n                        writable: !0,\n                        value: []\n                      });\n                      for (var n = arguments.length, e = new Array(n), r = 0; r < n; r++) e[r] = arguments[r];\n                      e.forEach(this.add.bind(this));\n                    }\n                    var n, e;\n                    return n = t, (e = [{\n                      key: \"add\",\n                      value: function (t) {\n                        return un(this, an).push(t), t;\n                      }\n                    }, {\n                      key: \"remove\",\n                      value: function (t) {\n                        var n = un(this, an).indexOf(t);\n                        return ~n && un(this, an).splice(n, 1), t;\n                      }\n                    }, {\n                      key: \"empty\",\n                      value: function () {\n                        return this.tweenables.map(this.remove.bind(this));\n                      }\n                    }, {\n                      key: \"isPlaying\",\n                      value: function () {\n                        return un(this, an).some(function (t) {\n                          return t.isPlaying();\n                        });\n                      }\n                    }, {\n                      key: \"play\",\n                      value: function () {\n                        return un(this, an).forEach(function (t) {\n                          return t.tween();\n                        }), this;\n                      }\n                    }, {\n                      key: \"pause\",\n                      value: function () {\n                        return un(this, an).forEach(function (t) {\n                          return t.pause();\n                        }), this;\n                      }\n                    }, {\n                      key: \"resume\",\n                      value: function () {\n                        return this.playingTweenables.forEach(function (t) {\n                          return t.resume();\n                        }), this;\n                      }\n                    }, {\n                      key: \"stop\",\n                      value: function (t) {\n                        return un(this, an).forEach(function (n) {\n                          return n.stop(t);\n                        }), this;\n                      }\n                    }, {\n                      key: \"tweenables\",\n                      get: function () {\n                        return function (t) {\n                          if (Array.isArray(t)) return en(t);\n                        }(t = un(this, an)) || function (t) {\n                          if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t);\n                        }(t) || function (t, n) {\n                          if (t) {\n                            if (\"string\" == typeof t) return en(t, n);\n                            var e = Object.prototype.toString.call(t).slice(8, -1);\n                            return \"Object\" === e && t.constructor && (e = t.constructor.name), \"Map\" === e || \"Set\" === e ? Array.from(t) : \"Arguments\" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? en(t, n) : void 0;\n                          }\n                        }(t) || function () {\n                          throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                        }();\n                        var t;\n                      }\n                    }, {\n                      key: \"playingTweenables\",\n                      get: function () {\n                        return un(this, an).filter(function (t) {\n                          return !t.hasEnded();\n                        });\n                      }\n                    }, {\n                      key: \"promises\",\n                      get: function () {\n                        return un(this, an).map(function (t) {\n                          return t.then();\n                        });\n                      }\n                    }]) && on(n.prototype, e), t;\n                  }();\n                kt.filters.token = i;\n              }\n            },\n            n = {};\n          function e(r) {\n            if (n[r]) return n[r].exports;\n            var i = n[r] = {\n              exports: {}\n            };\n            return t[r](i, i.exports, e), i.exports;\n          }\n          return e.d = function (t, n) {\n            for (var r in n) e.o(n, r) && !e.o(t, r) && Object.defineProperty(t, r, {\n              enumerable: !0,\n              get: n[r]\n            });\n          }, e.g = function () {\n            if (\"object\" == typeof globalThis) return globalThis;\n            try {\n              return this || new Function(\"return this\")();\n            } catch (t) {\n              if (\"object\" == typeof window) return window;\n            }\n          }(), e.o = function (t, n) {\n            return Object.prototype.hasOwnProperty.call(t, n);\n          }, e.r = function (t) {\n            \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n              value: \"Module\"\n            }), Object.defineProperty(t, \"__esModule\", {\n              value: !0\n            });\n          }, e(720);\n        }();\n      });\n    }, {}],\n    3: [function (require, module, exports) {\n      // Circle shaped progress bar\n\n      var Shape = require('./shape');\n      var utils = require('./utils');\n      var Circle = function Circle(container, options) {\n        // Use two arcs to form a circle\n        // See this answer http://stackoverflow.com/a/10477334/1446092\n        this._pathTemplate = 'M 50,50 m 0,-{radius}' + ' a {radius},{radius} 0 1 1 0,{2radius}' + ' a {radius},{radius} 0 1 1 0,-{2radius}';\n        this.containerAspectRatio = 1;\n        Shape.apply(this, arguments);\n      };\n      Circle.prototype = new Shape();\n      Circle.prototype.constructor = Circle;\n      Circle.prototype._pathString = function _pathString(opts) {\n        var widthOfWider = opts.strokeWidth;\n        if (opts.trailWidth && opts.trailWidth > opts.strokeWidth) {\n          widthOfWider = opts.trailWidth;\n        }\n        var r = 50 - widthOfWider / 2;\n        return utils.render(this._pathTemplate, {\n          radius: r,\n          '2radius': r * 2\n        });\n      };\n      Circle.prototype._trailString = function _trailString(opts) {\n        return this._pathString(opts);\n      };\n      module.exports = Circle;\n    }, {\n      \"./shape\": 8,\n      \"./utils\": 10\n    }],\n    4: [function (require, module, exports) {\n      // Line shaped progress bar\n\n      var Shape = require('./shape');\n      var utils = require('./utils');\n      var Line = function Line(container, options) {\n        this._pathTemplate = options.vertical ? 'M {center},100 L {center},0' : 'M 0,{center} L 100,{center}';\n        Shape.apply(this, arguments);\n      };\n      Line.prototype = new Shape();\n      Line.prototype.constructor = Line;\n      Line.prototype._initializeSvg = function _initializeSvg(svg, opts) {\n        var viewBoxStr = opts.vertical ? '0 0 ' + opts.strokeWidth + ' 100' : '0 0 100 ' + opts.strokeWidth;\n        svg.setAttribute('viewBox', viewBoxStr);\n        svg.setAttribute('preserveAspectRatio', 'none');\n      };\n      Line.prototype._pathString = function _pathString(opts) {\n        return utils.render(this._pathTemplate, {\n          center: opts.strokeWidth / 2\n        });\n      };\n      Line.prototype._trailString = function _trailString(opts) {\n        return this._pathString(opts);\n      };\n      module.exports = Line;\n    }, {\n      \"./shape\": 8,\n      \"./utils\": 10\n    }],\n    5: [function (require, module, exports) {\n      module.exports = {\n        // Higher level API, different shaped progress bars\n        Line: require('./line'),\n        Circle: require('./circle'),\n        SemiCircle: require('./semicircle'),\n        Square: require('./square'),\n        // Lower level API to use any SVG path\n        Path: require('./path'),\n        // Base-class for creating new custom shapes\n        // to be in line with the API of built-in shapes\n        // Undocumented.\n        Shape: require('./shape'),\n        // Internal utils, undocumented.\n        utils: require('./utils')\n      };\n    }, {\n      \"./circle\": 3,\n      \"./line\": 4,\n      \"./path\": 6,\n      \"./semicircle\": 7,\n      \"./shape\": 8,\n      \"./square\": 9,\n      \"./utils\": 10\n    }],\n    6: [function (require, module, exports) {\n      // Lower level API to animate any kind of svg path\n\n      var shifty = require('shifty');\n      var utils = require('./utils');\n      var Tweenable = shifty.Tweenable;\n      var EASING_ALIASES = {\n        easeIn: 'easeInCubic',\n        easeOut: 'easeOutCubic',\n        easeInOut: 'easeInOutCubic'\n      };\n      var Path = function Path(path, opts) {\n        // Throw a better error if not initialized with `new` keyword\n        if (!(this instanceof Path)) {\n          throw new Error('Constructor was called without new keyword');\n        }\n\n        // Default parameters for animation\n        opts = utils.extend({\n          delay: 0,\n          duration: 800,\n          easing: 'linear',\n          from: {},\n          to: {},\n          step: function () {}\n        }, opts);\n        var element;\n        if (utils.isString(path)) {\n          element = document.querySelector(path);\n        } else {\n          element = path;\n        }\n\n        // Reveal .path as public attribute\n        this.path = element;\n        this._opts = opts;\n        this._tweenable = null;\n\n        // Set up the starting positions\n        var length = this.path.getTotalLength();\n        this.path.style.strokeDasharray = length + ' ' + length;\n        this.set(0);\n      };\n      Path.prototype.value = function value() {\n        var offset = this._getComputedDashOffset();\n        var length = this.path.getTotalLength();\n        var progress = 1 - offset / length;\n        // Round number to prevent returning very small number like 1e-30, which\n        // is practically 0\n        return parseFloat(progress.toFixed(6), 10);\n      };\n      Path.prototype.set = function set(progress) {\n        this.stop();\n        this.path.style.strokeDashoffset = this._progressToOffset(progress);\n        var step = this._opts.step;\n        if (utils.isFunction(step)) {\n          var easing = this._easing(this._opts.easing);\n          var values = this._calculateTo(progress, easing);\n          var reference = this._opts.shape || this;\n          step(values, reference, this._opts.attachment);\n        }\n      };\n      Path.prototype.stop = function stop() {\n        this._stopTween();\n        this.path.style.strokeDashoffset = this._getComputedDashOffset();\n      };\n\n      // Method introduced here:\n      // http://jakearchibald.com/2013/animated-line-drawing-svg/\n      Path.prototype.animate = function animate(progress, opts, cb) {\n        opts = opts || {};\n        if (utils.isFunction(opts)) {\n          cb = opts;\n          opts = {};\n        }\n        var passedOpts = utils.extend({}, opts);\n\n        // Copy default opts to new object so defaults are not modified\n        var defaultOpts = utils.extend({}, this._opts);\n        opts = utils.extend(defaultOpts, opts);\n        var shiftyEasing = this._easing(opts.easing);\n        var values = this._resolveFromAndTo(progress, shiftyEasing, passedOpts);\n        this.stop();\n\n        // Trigger a layout so styles are calculated & the browser\n        // picks up the starting position before animating\n        this.path.getBoundingClientRect();\n        var offset = this._getComputedDashOffset();\n        var newOffset = this._progressToOffset(progress);\n        var self = this;\n        this._tweenable = new Tweenable();\n        this._tweenable.tween({\n          from: utils.extend({\n            offset: offset\n          }, values.from),\n          to: utils.extend({\n            offset: newOffset\n          }, values.to),\n          duration: opts.duration,\n          delay: opts.delay,\n          easing: shiftyEasing,\n          step: function (state) {\n            self.path.style.strokeDashoffset = state.offset;\n            var reference = opts.shape || self;\n            opts.step(state, reference, opts.attachment);\n          }\n        }).then(function (state) {\n          if (utils.isFunction(cb)) {\n            cb();\n          }\n        }).catch(function (err) {\n          console.error('Error in tweening:', err);\n          throw err;\n        });\n      };\n      Path.prototype._getComputedDashOffset = function _getComputedDashOffset() {\n        var computedStyle = window.getComputedStyle(this.path, null);\n        return parseFloat(computedStyle.getPropertyValue('stroke-dashoffset'), 10);\n      };\n      Path.prototype._progressToOffset = function _progressToOffset(progress) {\n        var length = this.path.getTotalLength();\n        return length - progress * length;\n      };\n\n      // Resolves from and to values for animation.\n      Path.prototype._resolveFromAndTo = function _resolveFromAndTo(progress, easing, opts) {\n        if (opts.from && opts.to) {\n          return {\n            from: opts.from,\n            to: opts.to\n          };\n        }\n        return {\n          from: this._calculateFrom(easing),\n          to: this._calculateTo(progress, easing)\n        };\n      };\n\n      // Calculate `from` values from options passed at initialization\n      Path.prototype._calculateFrom = function _calculateFrom(easing) {\n        return shifty.interpolate(this._opts.from, this._opts.to, this.value(), easing);\n      };\n\n      // Calculate `to` values from options passed at initialization\n      Path.prototype._calculateTo = function _calculateTo(progress, easing) {\n        return shifty.interpolate(this._opts.from, this._opts.to, progress, easing);\n      };\n      Path.prototype._stopTween = function _stopTween() {\n        if (this._tweenable !== null) {\n          this._tweenable.stop(true);\n          this._tweenable = null;\n        }\n      };\n      Path.prototype._easing = function _easing(easing) {\n        if (EASING_ALIASES.hasOwnProperty(easing)) {\n          return EASING_ALIASES[easing];\n        }\n        return easing;\n      };\n      module.exports = Path;\n    }, {\n      \"./utils\": 10,\n      \"shifty\": 2\n    }],\n    7: [function (require, module, exports) {\n      // Semi-SemiCircle shaped progress bar\n\n      var Shape = require('./shape');\n      var Circle = require('./circle');\n      var utils = require('./utils');\n      var SemiCircle = function SemiCircle(container, options) {\n        // Use one arc to form a SemiCircle\n        // See this answer http://stackoverflow.com/a/10477334/1446092\n        this._pathTemplate = 'M 50,50 m -{radius},0' + ' a {radius},{radius} 0 1 1 {2radius},0';\n        this.containerAspectRatio = 2;\n        Shape.apply(this, arguments);\n      };\n      SemiCircle.prototype = new Shape();\n      SemiCircle.prototype.constructor = SemiCircle;\n      SemiCircle.prototype._initializeSvg = function _initializeSvg(svg, opts) {\n        svg.setAttribute('viewBox', '0 0 100 50');\n      };\n      SemiCircle.prototype._initializeTextContainer = function _initializeTextContainer(opts, container, textContainer) {\n        if (opts.text.style) {\n          // Reset top style\n          textContainer.style.top = 'auto';\n          textContainer.style.bottom = '0';\n          if (opts.text.alignToBottom) {\n            utils.setStyle(textContainer, 'transform', 'translate(-50%, 0)');\n          } else {\n            utils.setStyle(textContainer, 'transform', 'translate(-50%, 50%)');\n          }\n        }\n      };\n\n      // Share functionality with Circle, just have different path\n      SemiCircle.prototype._pathString = Circle.prototype._pathString;\n      SemiCircle.prototype._trailString = Circle.prototype._trailString;\n      module.exports = SemiCircle;\n    }, {\n      \"./circle\": 3,\n      \"./shape\": 8,\n      \"./utils\": 10\n    }],\n    8: [function (require, module, exports) {\n      // Base object for different progress bar shapes\n\n      var Path = require('./path');\n      var utils = require('./utils');\n      var DESTROYED_ERROR = 'Object is destroyed';\n      var Shape = function Shape(container, opts) {\n        // Throw a better error if progress bars are not initialized with `new`\n        // keyword\n        if (!(this instanceof Shape)) {\n          throw new Error('Constructor was called without new keyword');\n        }\n\n        // Prevent calling constructor without parameters so inheritance\n        // works correctly. To understand, this is how Shape is inherited:\n        //\n        //   Line.prototype = new Shape();\n        //\n        // We just want to set the prototype for Line.\n        if (arguments.length === 0) {\n          return;\n        }\n\n        // Default parameters for progress bar creation\n        this._opts = utils.extend({\n          color: '#555',\n          strokeWidth: 1.0,\n          trailColor: null,\n          trailWidth: null,\n          fill: null,\n          text: {\n            style: {\n              color: null,\n              position: 'absolute',\n              left: '50%',\n              top: '50%',\n              padding: 0,\n              margin: 0,\n              transform: {\n                prefix: true,\n                value: 'translate(-50%, -50%)'\n              }\n            },\n            autoStyleContainer: true,\n            alignToBottom: true,\n            value: null,\n            className: 'progressbar-text'\n          },\n          svgStyle: {\n            display: 'block',\n            width: '100%'\n          },\n          warnings: false\n        }, opts, true); // Use recursive extend\n\n        // If user specifies e.g. svgStyle or text style, the whole object\n        // should replace the defaults to make working with styles easier\n        if (utils.isObject(opts) && opts.svgStyle !== undefined) {\n          this._opts.svgStyle = opts.svgStyle;\n        }\n        if (utils.isObject(opts) && utils.isObject(opts.text) && opts.text.style !== undefined) {\n          this._opts.text.style = opts.text.style;\n        }\n        var svgView = this._createSvgView(this._opts);\n        var element;\n        if (utils.isString(container)) {\n          element = document.querySelector(container);\n        } else {\n          element = container;\n        }\n        if (!element) {\n          throw new Error('Container does not exist: ' + container);\n        }\n        this._container = element;\n        this._container.appendChild(svgView.svg);\n        if (this._opts.warnings) {\n          this._warnContainerAspectRatio(this._container);\n        }\n        if (this._opts.svgStyle) {\n          utils.setStyles(svgView.svg, this._opts.svgStyle);\n        }\n\n        // Expose public attributes before Path initialization\n        this.svg = svgView.svg;\n        this.path = svgView.path;\n        this.trail = svgView.trail;\n        this.text = null;\n        var newOpts = utils.extend({\n          attachment: undefined,\n          shape: this\n        }, this._opts);\n        this._progressPath = new Path(svgView.path, newOpts);\n        if (utils.isObject(this._opts.text) && this._opts.text.value !== null) {\n          this.setText(this._opts.text.value);\n        }\n      };\n      Shape.prototype.animate = function animate(progress, opts, cb) {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        this._progressPath.animate(progress, opts, cb);\n      };\n      Shape.prototype.stop = function stop() {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n\n        // Don't crash if stop is called inside step function\n        if (this._progressPath === undefined) {\n          return;\n        }\n        this._progressPath.stop();\n      };\n      Shape.prototype.pause = function pause() {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        if (this._progressPath === undefined) {\n          return;\n        }\n        if (!this._progressPath._tweenable) {\n          // It seems that we can't pause this\n          return;\n        }\n        this._progressPath._tweenable.pause();\n      };\n      Shape.prototype.resume = function resume() {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        if (this._progressPath === undefined) {\n          return;\n        }\n        if (!this._progressPath._tweenable) {\n          // It seems that we can't resume this\n          return;\n        }\n        this._progressPath._tweenable.resume();\n      };\n      Shape.prototype.destroy = function destroy() {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        this.stop();\n        this.svg.parentNode.removeChild(this.svg);\n        this.svg = null;\n        this.path = null;\n        this.trail = null;\n        this._progressPath = null;\n        if (this.text !== null) {\n          this.text.parentNode.removeChild(this.text);\n          this.text = null;\n        }\n      };\n      Shape.prototype.set = function set(progress) {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        this._progressPath.set(progress);\n      };\n      Shape.prototype.value = function value() {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        if (this._progressPath === undefined) {\n          return 0;\n        }\n        return this._progressPath.value();\n      };\n      Shape.prototype.setText = function setText(newText) {\n        if (this._progressPath === null) {\n          throw new Error(DESTROYED_ERROR);\n        }\n        if (this.text === null) {\n          // Create new text node\n          this.text = this._createTextContainer(this._opts, this._container);\n          this._container.appendChild(this.text);\n        }\n\n        // Remove previous text and add new\n        if (utils.isObject(newText)) {\n          utils.removeChildren(this.text);\n          this.text.appendChild(newText);\n        } else {\n          this.text.innerHTML = newText;\n        }\n      };\n      Shape.prototype._createSvgView = function _createSvgView(opts) {\n        var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this._initializeSvg(svg, opts);\n        var trailPath = null;\n        // Each option listed in the if condition are 'triggers' for creating\n        // the trail path\n        if (opts.trailColor || opts.trailWidth) {\n          trailPath = this._createTrail(opts);\n          svg.appendChild(trailPath);\n        }\n        var path = this._createPath(opts);\n        svg.appendChild(path);\n        return {\n          svg: svg,\n          path: path,\n          trail: trailPath\n        };\n      };\n      Shape.prototype._initializeSvg = function _initializeSvg(svg, opts) {\n        svg.setAttribute('viewBox', '0 0 100 100');\n      };\n      Shape.prototype._createPath = function _createPath(opts) {\n        var pathString = this._pathString(opts);\n        return this._createPathElement(pathString, opts);\n      };\n      Shape.prototype._createTrail = function _createTrail(opts) {\n        // Create path string with original passed options\n        var pathString = this._trailString(opts);\n\n        // Prevent modifying original\n        var newOpts = utils.extend({}, opts);\n\n        // Defaults for parameters which modify trail path\n        if (!newOpts.trailColor) {\n          newOpts.trailColor = '#eee';\n        }\n        if (!newOpts.trailWidth) {\n          newOpts.trailWidth = newOpts.strokeWidth;\n        }\n        newOpts.color = newOpts.trailColor;\n        newOpts.strokeWidth = newOpts.trailWidth;\n\n        // When trail path is set, fill must be set for it instead of the\n        // actual path to prevent trail stroke from clipping\n        newOpts.fill = null;\n        return this._createPathElement(pathString, newOpts);\n      };\n      Shape.prototype._createPathElement = function _createPathElement(pathString, opts) {\n        var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathString);\n        path.setAttribute('stroke', opts.color);\n        path.setAttribute('stroke-width', opts.strokeWidth);\n        if (opts.fill) {\n          path.setAttribute('fill', opts.fill);\n        } else {\n          path.setAttribute('fill-opacity', '0');\n        }\n        return path;\n      };\n      Shape.prototype._createTextContainer = function _createTextContainer(opts, container) {\n        var textContainer = document.createElement('div');\n        textContainer.className = opts.text.className;\n        var textStyle = opts.text.style;\n        if (textStyle) {\n          if (opts.text.autoStyleContainer) {\n            container.style.position = 'relative';\n          }\n          utils.setStyles(textContainer, textStyle);\n          // Default text color to progress bar's color\n          if (!textStyle.color) {\n            textContainer.style.color = opts.color;\n          }\n        }\n        this._initializeTextContainer(opts, container, textContainer);\n        return textContainer;\n      };\n\n      // Give custom shapes possibility to modify text element\n      Shape.prototype._initializeTextContainer = function (opts, container, element) {\n        // By default, no-op\n        // Custom shapes should respect API options, such as text.style\n      };\n      Shape.prototype._pathString = function _pathString(opts) {\n        throw new Error('Override this function for each progress bar');\n      };\n      Shape.prototype._trailString = function _trailString(opts) {\n        throw new Error('Override this function for each progress bar');\n      };\n      Shape.prototype._warnContainerAspectRatio = function _warnContainerAspectRatio(container) {\n        if (!this.containerAspectRatio) {\n          return;\n        }\n        var computedStyle = window.getComputedStyle(container, null);\n        var width = parseFloat(computedStyle.getPropertyValue('width'), 10);\n        var height = parseFloat(computedStyle.getPropertyValue('height'), 10);\n        if (!utils.floatEquals(this.containerAspectRatio, width / height)) {\n          console.warn('Incorrect aspect ratio of container', '#' + container.id, 'detected:', computedStyle.getPropertyValue('width') + '(width)', '/', computedStyle.getPropertyValue('height') + '(height)', '=', width / height);\n          console.warn('Aspect ratio of should be', this.containerAspectRatio);\n        }\n      };\n      module.exports = Shape;\n    }, {\n      \"./path\": 6,\n      \"./utils\": 10\n    }],\n    9: [function (require, module, exports) {\n      // Square shaped progress bar\n      // Note: Square is not core part of API anymore. It's left here\n      //       for reference. square is not included to the progressbar\n      //       build anymore\n\n      var Shape = require('./shape');\n      var utils = require('./utils');\n      var Square = function Square(container, options) {\n        this._pathTemplate = 'M 0,{halfOfStrokeWidth}' + ' L {width},{halfOfStrokeWidth}' + ' L {width},{width}' + ' L {halfOfStrokeWidth},{width}' + ' L {halfOfStrokeWidth},{strokeWidth}';\n        this._trailTemplate = 'M {startMargin},{halfOfStrokeWidth}' + ' L {width},{halfOfStrokeWidth}' + ' L {width},{width}' + ' L {halfOfStrokeWidth},{width}' + ' L {halfOfStrokeWidth},{halfOfStrokeWidth}';\n        Shape.apply(this, arguments);\n      };\n      Square.prototype = new Shape();\n      Square.prototype.constructor = Square;\n      Square.prototype._pathString = function _pathString(opts) {\n        var w = 100 - opts.strokeWidth / 2;\n        return utils.render(this._pathTemplate, {\n          width: w,\n          strokeWidth: opts.strokeWidth,\n          halfOfStrokeWidth: opts.strokeWidth / 2\n        });\n      };\n      Square.prototype._trailString = function _trailString(opts) {\n        var w = 100 - opts.strokeWidth / 2;\n        return utils.render(this._trailTemplate, {\n          width: w,\n          strokeWidth: opts.strokeWidth,\n          halfOfStrokeWidth: opts.strokeWidth / 2,\n          startMargin: opts.strokeWidth / 2 - opts.trailWidth / 2\n        });\n      };\n      module.exports = Square;\n    }, {\n      \"./shape\": 8,\n      \"./utils\": 10\n    }],\n    10: [function (require, module, exports) {\n      // Utility functions\n\n      var merge = require('lodash.merge');\n      var PREFIXES = 'Webkit Moz O ms'.split(' ');\n      var FLOAT_COMPARISON_EPSILON = 0.001;\n\n      // Renders templates with given variables. Variables must be surrounded with\n      // braces without any spaces, e.g. {variable}\n      // All instances of variable placeholders will be replaced with given content\n      // Example:\n      // render('Hello, {message}!', {message: 'world'})\n      function render(template, vars) {\n        var rendered = template;\n        for (var key in vars) {\n          if (vars.hasOwnProperty(key)) {\n            var val = vars[key];\n            var regExpString = '\\\\{' + key + '\\\\}';\n            var regExp = new RegExp(regExpString, 'g');\n            rendered = rendered.replace(regExp, val);\n          }\n        }\n        return rendered;\n      }\n      function setStyle(element, style, value) {\n        var elStyle = element.style; // cache for performance\n\n        for (var i = 0; i < PREFIXES.length; ++i) {\n          var prefix = PREFIXES[i];\n          elStyle[prefix + capitalize(style)] = value;\n        }\n        elStyle[style] = value;\n      }\n      function setStyles(element, styles) {\n        forEachObject(styles, function (styleValue, styleName) {\n          // Allow disabling some individual styles by setting them\n          // to null or undefined\n          if (styleValue === null || styleValue === undefined) {\n            return;\n          }\n\n          // If style's value is {prefix: true, value: '50%'},\n          // Set also browser prefixed styles\n          if (isObject(styleValue) && styleValue.prefix === true) {\n            setStyle(element, styleName, styleValue.value);\n          } else {\n            element.style[styleName] = styleValue;\n          }\n        });\n      }\n      function capitalize(text) {\n        return text.charAt(0).toUpperCase() + text.slice(1);\n      }\n      function isString(obj) {\n        return typeof obj === 'string' || obj instanceof String;\n      }\n      function isFunction(obj) {\n        return typeof obj === 'function';\n      }\n      function isArray(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n      }\n\n      // Returns true if `obj` is object as in {a: 1, b: 2}, not if it's function or\n      // array\n      function isObject(obj) {\n        if (isArray(obj)) {\n          return false;\n        }\n        var type = typeof obj;\n        return type === 'object' && !!obj;\n      }\n      function forEachObject(object, callback) {\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            var val = object[key];\n            callback(val, key);\n          }\n        }\n      }\n      function floatEquals(a, b) {\n        return Math.abs(a - b) < FLOAT_COMPARISON_EPSILON;\n      }\n\n      // https://coderwall.com/p/nygghw/don-t-use-innerhtml-to-empty-dom-elements\n      function removeChildren(el) {\n        while (el.firstChild) {\n          el.removeChild(el.firstChild);\n        }\n      }\n      module.exports = {\n        extend: merge,\n        render: render,\n        setStyle: setStyle,\n        setStyles: setStyles,\n        capitalize: capitalize,\n        isString: isString,\n        isFunction: isFunction,\n        isObject: isObject,\n        forEachObject: forEachObject,\n        floatEquals: floatEquals,\n        removeChildren: removeChildren\n      };\n    }, {\n      \"lodash.merge\": 1\n    }]\n  }, {}, [5])(5);\n});","map":null,"metadata":{},"sourceType":"script"}